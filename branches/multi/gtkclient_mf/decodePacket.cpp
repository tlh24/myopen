#include <stdio.h>
#include "../firmware_stage9_mf/decoder.h" //this is for the matched filter enoding. 
#include "packet.h"

unsigned short decoder_694 [128] = {
	0x120,0x121,0x122,0x123,0x124,0x126,0x128,0x129,
	0x12c,0x130,0x131,0x132,0x133,0x134,0x100,0x101,
	0x102,0x103,0x104,0x106,0x108,0x109,0x10c,0x110,
	0x111,0x112,0x113,0x114,0x116,0x118,0x119,0x11c,
	0x102,0x103,0x104,0x106,0x108,0x109,0x100,0x101,
	0x111,0x112,0x100,0x101,0x100,0x101,0x0,0x1,
	0x2,0x3,0x4,0x6,0x8,0x9,0xc,0x10,
	0x11,0x12,0x13,0x14,0x16,0x18,0x19,0x1c,
	0x20,0x21,0x22,0x23,0x24,0x26,0x28,0x29,
	0x2c,0x30,0x31,0x32,0x33,0x34,0x36,0x38,
	0x39,0x3c,0x40,0x41,0x42,0x43,0x44,0x46,
	0x48,0x49,0x4c,0x60,0x61,0x62,0x63,0x64,
	0x66,0x68,0x69,0x6c,0x80,0x81,0x82,0x83,
	0x84,0x86,0x88,0x89,0x8c,0x90,0x91,0x92,
	0x93,0x94,0x96,0x98,0x99,0x9c,0xc0,0xc1,
	0xc2,0xc3,0xc4,0xc6,0xc8,0xc9,0xcc,0x11c
	};


//decode the template-match part of a packet
int decodePacket(packet* p, int* channel, char* match, int svn, 
					  unsigned int &echo){
	// channel and match must be arrays of 32.
	// match can be 0 (none) 1 or 2.
	// returns the channel flag, 0-15, 'exch'
	// and the flag, also 0-15.
	int exch = 0; 
	exch += 0x8 & ((p->tmpl[0]) >> (32-4)); //0x80808080 format; convert to 0xf format.
	exch += 0x4 & ((p->tmpl[0]) >> (24-3));
	exch += 0x2 & ((p->tmpl[0]) >> (16-2));
	exch += 0x1 & ((p->tmpl[0]) >> (8-1));
	
	echo = 0; 
	echo += 0x8 & ((p->tmpl[1]) >> (32-4)); //0x80808080 format; convert to 0xf format.
	echo += 0x4 & ((p->tmpl[1]) >> (24-3));
	echo += 0x2 & ((p->tmpl[1]) >> (16-2));
	echo += 0x1 & ((p->tmpl[1]) >> (8-1));
	
	//mapping : 0 -> 0,32,64,96; 1->1,33,65,97. 
	// much simpler than old mapping.
	for(int k=0; k<2; k++){ //2 32 bit word template matches per packet
		for(int j=0; j<4; j++){ //4 bytes per word
			int chan = (exch * 8)%32 + k*4 + j; 
			unsigned char encoded = ((p->tmpl[k]) >> (8*j)) & 0x7f; 
			unsigned short decoded; 
			if(svn < 700) decoded = decoder_694[encoded]; 
			else decoded = decoder[encoded]; 
			if(decoded & 0x100) printf("error caught in template match!\n"); 
			int bitoff[4] = {0,4,1,5}; //0,32,64,96.
			for(int m = 0; m < 4; m++){
				int adr = chan + m*32;
				int indx = k*16 + j*4 + m; 
				channel[indx] = adr; 
				match[indx] = 0; 
				int b = bitoff[m]; 
				for(int t=0; t<2; t++){
					if((0x01<<(b+2*t)) & decoded){
						match[indx] = t+1; 
					}
				}
			}
		}
	}
	return exch; 
}