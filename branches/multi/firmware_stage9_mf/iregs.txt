
/** ---- i0 ---- **/
0 (0)		r5 = [i0++]; //either toggle STEP or MUXRESET, depending on the channel.
4 (1)	 r5 = [i0++]  //r5 = b0.0, r1 = x1(n-1)
8 (2)	 r5 = [i0++]  //r5 = b0.1; r2 = x1(n-2)
12 (3)	 r5 = [i0++]  //r5 = b0.2; r4 = y1(n-2) 
16 (4)	 r5 = [i0++]  //r5 = a0.0; r3 = y1(n-1)
20 (5)	 r5 = [i0++]  //r5 = a0.1; save x1(n-1)
24 (6)	 r1 = [i0++];  //take abs, r1 = sqrt AGC targets.
28 (7)	 r1 = [i0++];  //r1 = mu (1) for both channels. 
32 (8)	 i0 += m3  //m3 = 8, dummy read to keep i2 in sync; ifndef _AGC_
32 (8)	 r2 = [i0++];  //
36 (9)	 r2 = [i0++];  //1
40 (10)	 r2 = [i0++];  //2
44 (11)	 r2 = [i0++];  //3
48 (12)	 r2 = [i0++];  //4
52 (13)	 r2 = [i0++];  //5
56 (14)	 r2 = [i0++];  //6
60 (15)	 r2 = [i0++];  //7
64 (16)	 r2 = [i0++];  //8
68 (17)	 r2 = [i0++];  //9
72 (18)	 r2 = [i0++];  //10
76 (19)	 r2 = [i0++];  //11
80 (20)	 r2 = [i0++];  //12
84 (21)	 r2 = [i0++];  //13
88 (22)	 r2 = [i0++];  //14
92 (23)	 r5 = [i0++];  //i1 to saturated sample, r5 = weight decay.
96 (24)	 i0 -= m1  //
32 (8)	 r2 = [i0];  // r2 = w0.
32 (8)	 [i0++m1] = r4 ;  // save the new weight, i0 back to b00 unit 1.
96 (24)	 r5 = [i0++]  // r7 samp; r1 x1(n-1); r5 b0.0
100 (25)	 r5 = [i0++]  //r5 = b0.1; r2 = x1(n-2)
104 (26)	 r5 = [i0++]  //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
108 (27)	 r5 = [i0++]  //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
112 (28)	 r5 = [i0++]  //r5 = a0.1; save x1(n-1)
116 (29)												 r5 = [i0++]  //r5 = b1.0; save y1(n-1) 
120 (30)	 r5 = [i0++]  //r5 = b1.1; save y1(n-2) 
124 (31)	 r5 = [i0++]  //r5 = b1.2; r1 = y2(n-1) 
128 (32)	 r5 = [i0++]  //r5 = a1.0; r2 = y2(n-2) 
132 (33)	 r5 = [i0++]; 					   //r5 = a1.1
136 (34)	 r5 = [i0++] ; //r0 = y2(n); r5 = threshold.
140 (35)	 r5 = [i0++]  // r6 match; r1 x1(n-1); r5 b0.0
144 (36)	 r5 = [i0++]  //r5 = b0.1; r2 = x1(n-2)
148 (37)	 r5 = [i0++]  //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
152 (38)	 r5 = [i0++]  //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
156 (39)	 r5 = [i0++]  //r5 = a0.1; save x1(n-1)
160 (40)															 r5 = [i0++]  //r5 = b1.0; save y1(n-1) 
164 (41)	 r5 = [i0++]  //r5 = b1.1; save y1(n-2) 
168 (42)	 r5 = [i0++]  //r5 = b1.2; r1 = y2(n-1) 
172 (43)	 r5 = [i0++]  //r5 = a1.0; r2 = y2(n-2) 
176 (44)	 r5 = [i0++]; 					   //r5 = a1.1
180 (45)	 r5 = [i0++] ; //r0 = y2(n); r5 = threshold.
184 (46)	 r7 = [i0++]  // add threshold, save y2(n)`
188 (47)	 r5 = [i0++]  //either -1 (0xffff) or 0; load mask (0x00040004), save y2(n-1)
192 (48)	 r5 = [i0++]  //r5 = b0.0, r1 = x1(n-1)
196 (49)	 r5 = [i0++]  //r5 = b0.1; r2 = x1(n-2)
200 (50)	 r5 = [i0++]  //r5 = b0.2; r4 = y1(n-2) 
204 (51)	 r5 = [i0++]  //r5 = a0.0; r3 = y1(n-1)
208 (52)	 r5 = [i0++]  //r5 = a0.1; save x1(n-1)
212 (53)	 r1 = [i0++];  //take abs, r1 = sqrt AGC targets.
216 (54)	 r1 = [i0++];  //r1 = mu (1) for both channels. 
220 (55)	 i0 += m3  //m3 = 8, dummy read to keep i2 in sync; ifndef _AGC_
220 (55)	 r2 = [i0++];  //
224 (56)	 r2 = [i0++];  //1
228 (57)	 r2 = [i0++];  //2
232 (58)	 r2 = [i0++];  //3
236 (59)	 r2 = [i0++];  //4
240 (60)	 r2 = [i0++];  //5
244 (61)	 r2 = [i0++];  //6
248 (62)	 r2 = [i0++];  //7
252 (63)	 r2 = [i0++];  //8
256 (64)	 r2 = [i0++];  //9
260 (65)	 r2 = [i0++];  //10
264 (66)	 r2 = [i0++];  //11
268 (67)	 r2 = [i0++];  //12
272 (68)	 r2 = [i0++];  //13
276 (69)	 r2 = [i0++];  //14
280 (70)	 r5 = [i0++];  //i1 to saturated sample, r5 = weight decay.
284 (71)	 i0 -= m1  //
220 (55)	 r2 = [i0];  // r2 = w0.
220 (55)	 [i0++m1] = r4 ;  // save the new weight, i0 back to b00 unit 1.
284 (71)	 r5 = [i0++]  // r7 samp; r1 x1(n-1); r5 b0.0
288 (72)	 r5 = [i0++]  //r5 = b0.1; r2 = x1(n-2)
292 (73)	 r5 = [i0++]  //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
296 (74)	 r5 = [i0++]  //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
300 (75)	 r5 = [i0++]  //r5 = a0.1; save x1(n-1)
304 (76)												 r5 = [i0++]  //r5 = b1.0; save y1(n-1) 
308 (77)	 r5 = [i0++]  //r5 = b1.1; save y1(n-2) 
312 (78)	 r5 = [i0++]  //r5 = b1.2; r1 = y2(n-1) 
316 (79)	 r5 = [i0++]  //r5 = a1.0; r2 = y2(n-2) 
320 (80)	 r5 = [i0++]; 					   //r5 = a1.1
324 (81)	 r5 = [i0++] ; //r0 = y2(n); r5 = threshold.
328 (82)	 r5 = [i0++]  // r6 match; r1 x1(n-1); r5 b0.0
332 (83)	 r5 = [i0++]  //r5 = b0.1; r2 = x1(n-2)
336 (84)	 r5 = [i0++]  //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
340 (85)	 r5 = [i0++]  //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
344 (86)	 r5 = [i0++]  //r5 = a0.1; save x1(n-1)
348 (87)															 r5 = [i0++]  //r5 = b1.0; save y1(n-1) 
352 (88)	 r5 = [i0++]  //r5 = b1.1; save y1(n-2) 
356 (89)	 r5 = [i0++]  //r5 = b1.2; r1 = y2(n-1) 
360 (90)	 r5 = [i0++]  //r5 = a1.0; r2 = y2(n-2) 
364 (91)	 r5 = [i0++]; 					   //r5 = a1.1
368 (92)	 r5 = [i0++] ; //r0 = y2(n); r5 = threshold.
372 (93)	 r7 = [i0++]  // subtract threshold, save y2(n)`
376 (94)	 r5 = [i0++]  //either -1 (0xffff) or 0; load mask (0x00040004), save y2(n-1)
380 (95)		r6 = [i0++];  //load channel into r6.

/** ---- i1 ---- **/
0 (0)	 r1 = [i1++];  //r5 = b0.0, r1 = x1(n-1)
4 (1)	 r2 = [i1++] ; //r5 = b0.1; r2 = x1(n-2)
8 (2)	 r4 = [i1++] ; //r5 = b0.2; r4 = y1(n-2) 
12 (3)	 r3 = [i1++]; //r5 = a0.0; r3 = y1(n-1)
16 (4)	 r5 = [i1++] ; //
20 (5)	 i1 += m0;   //
340 (85)	 r1 = [i1++m0]  //
660 (165)	 r1 = [i1++m0]  //1
980 (245)	 r1 = [i1++m0]  //2
1300 (325)	 r1 = [i1++m0]  //3
1620 (405)	 r1 = [i1++m0]  //4
1940 (485)	 r1 = [i1++m0]  //5
2260 (565)	 r1 = [i1++m0]  //6
2580 (645)	 r1 = [i1++m0]  //7
2900 (725)	 r1 = [i1++m0]  //8
3220 (805)	 r1 = [i1++m0]  //9
3540 (885)	 r1 = [i1++m0]  //10
3860 (965)	 r1 = [i1++m0]  //11
4180 (1045)	 r1 = [i1++m0]  //12
4500 (1125)	 r1 = [i1++m0]  //13
4820 (1205)	 r1 = [i1++m0]  //14
20 (5)	 r1 = [i1++]  //i1 to saturated sample, r5 = weight decay.
24 (6)	 i1 += m2  //move i1 to update channel, save saturated.
344 (86)	 r1 = [i1++m3]  // r2 = w0.
352 (88)	 i1 -= m2 ; //
32 (8)	 r1 = [i1++];   // r7 samp; r1 x1(n-1); r5 b0.0
36 (9)	 r2 = [i1++] ; //r5 = b0.1; r2 = x1(n-2)
40 (10)	 r3 = [i1++] ; //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
44 (11)	 r4 = [i1++] ; //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
48 (12)	 r1 = [i1++] ; //r5 = b1.2; r1 = y2(n-1) 
52 (13)	 r2 = [i1++] ; //r5 = a1.0; r2 = y2(n-2) 
56 (14)	 r1 = [i1++] ; // r6 match; r1 x1(n-1); r5 b0.0
60 (15)	 r2 = [i1++] ; //r5 = b0.1; r2 = x1(n-2)
64 (16)	 r3 = [i1++] ; //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
68 (17)	 r4 = [i1++] ; //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
72 (18)	 r1 = [i1++] ; //r5 = b1.2; r1 = y2(n-1) 
76 (19)	 r2 = [i1++] ; //r5 = a1.0; r2 = y2(n-2) 
80 (20)	 r1 = [i1++];  //r5 = b0.0, r1 = x1(n-1)
84 (21)	 r2 = [i1++] ; //r5 = b0.1; r2 = x1(n-2)
88 (22)	 r4 = [i1++] ; //r5 = b0.2; r4 = y1(n-2) 
92 (23)	 r3 = [i1++]; //r5 = a0.0; r3 = y1(n-1)
96 (24)	 r5 = [i1++] ; //
100 (25)	 i1 += m0;   //
420 (105)	 r1 = [i1++m0]  //
740 (185)	 r1 = [i1++m0]  //1
1060 (265)	 r1 = [i1++m0]  //2
1380 (345)	 r1 = [i1++m0]  //3
1700 (425)	 r1 = [i1++m0]  //4
2020 (505)	 r1 = [i1++m0]  //5
2340 (585)	 r1 = [i1++m0]  //6
2660 (665)	 r1 = [i1++m0]  //7
2980 (745)	 r1 = [i1++m0]  //8
3300 (825)	 r1 = [i1++m0]  //9
3620 (905)	 r1 = [i1++m0]  //10
3940 (985)	 r1 = [i1++m0]  //11
4260 (1065)	 r1 = [i1++m0]  //12
4580 (1145)	 r1 = [i1++m0]  //13
4900 (1225)	 r1 = [i1++m0]  //14
100 (25)	 r1 = [i1++]  //i1 to saturated sample, r5 = weight decay.
104 (26)	 i1 += m2  //move i1 to update channel, save saturated.
424 (106)	 r1 = [i1++m3]  // r2 = w0.
432 (108)	 i1 -= m2 ; //
112 (28)	 r1 = [i1++];   // r7 samp; r1 x1(n-1); r5 b0.0
116 (29)	 r2 = [i1++] ; //r5 = b0.1; r2 = x1(n-2)
120 (30)	 r3 = [i1++] ; //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
124 (31)	 r4 = [i1++] ; //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
128 (32)	 r1 = [i1++] ; //r5 = b1.2; r1 = y2(n-1) 
132 (33)	 r2 = [i1++] ; //r5 = a1.0; r2 = y2(n-2) 
136 (34)	 r1 = [i1++] ; // r6 match; r1 x1(n-1); r5 b0.0
140 (35)	 r2 = [i1++] ; //r5 = b0.1; r2 = x1(n-2)
144 (36)	 r3 = [i1++] ; //r5 = b0.2; r3 = y1(n-1) or x2(n-1)
148 (37)	 r4 = [i1++] ; //r5 = a0.0; r4 = y1(n-2) or x2(n-1)
152 (38)	 r1 = [i1++] ; //r5 = b1.2; r1 = y2(n-1) 
156 (39)	 r2 = [i1++] ; //r5 = a1.0; r2 = y2(n-2) 

/** ---- i2 ---- **/
0 (0)	 [i2++] = r7 ; //r5 = a0.1; save x1(n-1)
4 (1)	 [i2++] = r1;  //apply gain,save x1(n-2)
8 (2)	 [i2++] = r3;  //save y1(n-2) ;14 bits in SRC, this makes 22 bits and
12 (3)	 [i2++] = r0;  //save y1(n-1) ;gain goes from 0-128 hence (don't forget about sign)
16 (4)	 [i2++] = r3;  // save the gain.
20 (5)	 r3 = [i2++];  //m3 = 8, dummy read to keep i2 in sync; ifndef _AGC_
20 (5)	 [i2++] = r7 ; //
24 (6)	 [i2++] = r0 ;   //move i1 to update channel, save saturated.
28 (7)	 [i2++] = r6;  //load delta w, save LMS prediction.
32 (8)	 [i2++] = r7 ; //r5 = a0.1; save x1(n-1)
36 (9)	 [i2++] = r1 ; //r0 = y1(n); save x1(n-2)
40 (10)	 [i2++] = r0 ; //r5 = b1.0; save y1(n-1) 
44 (11)	 [i2++] = r3 ; //r5 = b1.1; save y1(n-2) 
48 (12)	 [i2++] = r0;  // add threshold, save y2(n)`
52 (13)	 [i2++] = r1;  //either -1 (0xffff) or 0, save y2(n-1)
56 (14)	 [i2++] = r7 ; //r5 = a0.1; save x1(n-1)
60 (15)	 [i2++] = r1 ; //r0 = y1(n); save x1(n-2)
64 (16)	 [i2++] = r0 ; //r5 = b1.0; save y1(n-1) 
68 (17)	 [i2++] = r3 ; //r5 = b1.1; save y1(n-2) 
72 (18)	 [i2++] = r0;  // add threshold, save y2(n)`
76 (19)	 [i2++] = r1;  //either -1 (0xffff) or 0; load mask (0x00040004), save y2(n-1)
80 (20)	 [i2++] = r7 ; //r5 = a0.1; save x1(n-1)
84 (21)	 [i2++] = r1;  //apply gain,save x1(n-2)
88 (22)	 [i2++] = r3;  //save y1(n-2) ;14 bits in SRC, this makes 22 bits and
92 (23)	 [i2++] = r0;  //save y1(n-1) ;gain goes from 0-128 hence (don't forget about sign)
96 (24)	 [i2++] = r3;  // save the gain.
100 (25)	 r3 = [i2++];  //m3 = 8, dummy read to keep i2 in sync; ifndef _AGC_
100 (25)	 [i2++] = r7 ; //
104 (26)	 [i2++] = r0 ;   //move i1 to update channel, save saturated.
108 (27)	 [i2++] = r6;  //load delta w, save LMS prediction.
112 (28)	 [i2++] = r7 ; //r5 = a0.1; save x1(n-1)
116 (29)	 [i2++] = r1 ; //r0 = y1(n); save x1(n-2)
120 (30)	 [i2++] = r0 ; //r5 = b1.0; save y1(n-1) 
124 (31)	 [i2++] = r3 ; //r5 = b1.1; save y1(n-2) 
128 (32)	 [i2++] = r0;  // add threshold, save y2(n)`
132 (33)	 [i2++] = r1;  //either -1 (0xffff) or 0; load mask (0x00080008), save y2(n-1)
136 (34)	 [i2++] = r7 ; //r5 = a0.1; save x1(n-1)
140 (35)	 [i2++] = r1 ; //r0 = y1(n); save x1(n-2)
144 (36)	 [i2++] = r0 ; //r5 = b1.0; save y1(n-1) 
148 (37)	 [i2++] = r3 ; //r5 = b1.1; save y1(n-2) 
152 (38)	 [i2++] = r0;  // subtract threshold, save y2(n)`
156 (39)	 [i2++] = r1;  //either -1 (0xffff) or 0; load mask (0x00040004), save y2(n-1)

/** ---- i3 ---- **/
0 (0)	 r0 = [i3++];  //for m1
4 (1)	 r1 = [i3++];  //for m2
8 (2)	 r4 = [i3++];  //for QS. (queue-state)
12 (3)				r7 = [i3++];  //load state flag, used as an OR mask for communicating with bridge.
16 (4)				r6 = [i3++];  //points to MATCH_PTR7; loops every 4 packets. cycles through 256bits.
