// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spikes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Spike_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spike_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Display_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Display_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spikes_2eproto() {
  protobuf_AddDesc_spikes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spikes.proto");
  GOOGLE_CHECK(file != NULL);
  Spike_msg_descriptor_ = file->message_type(0);
  static const int Spike_msg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spike_msg, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spike_msg, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spike_msg, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spike_msg, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spike_msg, seq_),
  };
  Spike_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spike_msg_descriptor_,
      Spike_msg::default_instance_,
      Spike_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spike_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spike_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spike_msg));
  Display_msg_descriptor_ = file->message_type(1);
  static const int Display_msg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, juicer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, cursorsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, targetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, cursoralpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, targetalpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, irdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, bgcolor_),
  };
  Display_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Display_msg_descriptor_,
      Display_msg::default_instance_,
      Display_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Display_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Display_msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spikes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spike_msg_descriptor_, &Spike_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Display_msg_descriptor_, &Display_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spikes_2eproto() {
  delete Spike_msg::default_instance_;
  delete Spike_msg_reflection_;
  delete Display_msg::default_instance_;
  delete Display_msg_reflection_;
}

void protobuf_AddDesc_spikes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014spikes.proto\"K\n\tSpike_msg\022\n\n\002ts\030\001 \002(\004\022"
    "\014\n\004chan\030\002 \002(\r\022\014\n\004unit\030\003 \001(\r\022\t\n\001w\030\006 \001(\014\022\013"
    "\n\003seq\030\007 \001(\r\"\317\001\n\013Display_msg\022\016\n\006cursor\030\001 "
    "\003(\001\022\016\n\006target\030\002 \003(\001\022\r\n\005touch\030\003 \001(\010\022\016\n\006ju"
    "icer\030\004 \001(\010\022\016\n\006manual\030\005 \001(\010\022\022\n\ncursorSize"
    "\030\006 \001(\002\022\022\n\ntargetSize\030\007 \001(\002\022\023\n\013cursorAlph"
    "a\030\010 \001(\002\022\023\n\013targetAlpha\030\t \001(\002\022\016\n\006irDiff\030\n"
    " \001(\002\022\017\n\007bgColor\030\013 \003(\002", 301);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spikes.proto", &protobuf_RegisterTypes);
  Spike_msg::default_instance_ = new Spike_msg();
  Display_msg::default_instance_ = new Display_msg();
  Spike_msg::default_instance_->InitAsDefaultInstance();
  Display_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spikes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spikes_2eproto {
  StaticDescriptorInitializer_spikes_2eproto() {
    protobuf_AddDesc_spikes_2eproto();
  }
} static_descriptor_initializer_spikes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Spike_msg::kTsFieldNumber;
const int Spike_msg::kChanFieldNumber;
const int Spike_msg::kUnitFieldNumber;
const int Spike_msg::kWFieldNumber;
const int Spike_msg::kSeqFieldNumber;
#endif  // !_MSC_VER

Spike_msg::Spike_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Spike_msg::InitAsDefaultInstance() {
}

Spike_msg::Spike_msg(const Spike_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Spike_msg::SharedCtor() {
  _cached_size_ = 0;
  ts_ = GOOGLE_ULONGLONG(0);
  chan_ = 0u;
  unit_ = 0u;
  w_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spike_msg::~Spike_msg() {
  SharedDtor();
}

void Spike_msg::SharedDtor() {
  if (w_ != &::google::protobuf::internal::kEmptyString) {
    delete w_;
  }
  if (this != default_instance_) {
  }
}

void Spike_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spike_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spike_msg_descriptor_;
}

const Spike_msg& Spike_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spikes_2eproto();  return *default_instance_;
}

Spike_msg* Spike_msg::default_instance_ = NULL;

Spike_msg* Spike_msg::New() const {
  return new Spike_msg;
}

void Spike_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ts_ = GOOGLE_ULONGLONG(0);
    chan_ = 0u;
    unit_ = 0u;
    if (has_w()) {
      if (w_ != &::google::protobuf::internal::kEmptyString) {
        w_->clear();
      }
    }
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spike_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chan;
        break;
      }
      
      // required uint32 chan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unit;
        break;
      }
      
      // optional uint32 unit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_)));
          set_has_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_w;
        break;
      }
      
      // optional bytes w = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_w:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_w()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seq;
        break;
      }
      
      // optional uint32 seq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spike_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ts(), output);
  }
  
  // required uint32 chan = 2;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chan(), output);
  }
  
  // optional uint32 unit = 3;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unit(), output);
  }
  
  // optional bytes w = 6;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->w(), output);
  }
  
  // optional uint32 seq = 7;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spike_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ts(), target);
  }
  
  // required uint32 chan = 2;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chan(), target);
  }
  
  // optional uint32 unit = 3;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unit(), target);
  }
  
  // optional bytes w = 6;
  if (has_w()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->w(), target);
  }
  
  // optional uint32 seq = 7;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spike_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }
    
    // required uint32 chan = 2;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chan());
    }
    
    // optional uint32 unit = 3;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit());
    }
    
    // optional bytes w = 6;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->w());
    }
    
    // optional uint32 seq = 7;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spike_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spike_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spike_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spike_msg::MergeFrom(const Spike_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spike_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spike_msg::CopyFrom(const Spike_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spike_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Spike_msg::Swap(Spike_msg* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(chan_, other->chan_);
    std::swap(unit_, other->unit_);
    std::swap(w_, other->w_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spike_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spike_msg_descriptor_;
  metadata.reflection = Spike_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Display_msg::kCursorFieldNumber;
const int Display_msg::kTargetFieldNumber;
const int Display_msg::kTouchFieldNumber;
const int Display_msg::kJuicerFieldNumber;
const int Display_msg::kManualFieldNumber;
const int Display_msg::kCursorSizeFieldNumber;
const int Display_msg::kTargetSizeFieldNumber;
const int Display_msg::kCursorAlphaFieldNumber;
const int Display_msg::kTargetAlphaFieldNumber;
const int Display_msg::kIrDiffFieldNumber;
const int Display_msg::kBgColorFieldNumber;
#endif  // !_MSC_VER

Display_msg::Display_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Display_msg::InitAsDefaultInstance() {
}

Display_msg::Display_msg(const Display_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Display_msg::SharedCtor() {
  _cached_size_ = 0;
  touch_ = false;
  juicer_ = false;
  manual_ = false;
  cursorsize_ = 0;
  targetsize_ = 0;
  cursoralpha_ = 0;
  targetalpha_ = 0;
  irdiff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Display_msg::~Display_msg() {
  SharedDtor();
}

void Display_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Display_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Display_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Display_msg_descriptor_;
}

const Display_msg& Display_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spikes_2eproto();  return *default_instance_;
}

Display_msg* Display_msg::default_instance_ = NULL;

Display_msg* Display_msg::New() const {
  return new Display_msg;
}

void Display_msg::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    touch_ = false;
    juicer_ = false;
    manual_ = false;
    cursorsize_ = 0;
    targetsize_ = 0;
    cursoralpha_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    targetalpha_ = 0;
    irdiff_ = 0;
  }
  cursor_.Clear();
  target_.Clear();
  bgcolor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Display_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double cursor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cursor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_cursor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cursor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_cursor;
        if (input->ExpectTag(17)) goto parse_target;
        break;
      }
      
      // repeated double target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_target())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_target())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target;
        if (input->ExpectTag(24)) goto parse_touch;
        break;
      }
      
      // optional bool touch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &touch_)));
          set_has_touch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_juicer;
        break;
      }
      
      // optional bool juicer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_juicer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &juicer_)));
          set_has_juicer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_manual;
        break;
      }
      
      // optional bool manual = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_)));
          set_has_manual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_cursorSize;
        break;
      }
      
      // optional float cursorSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cursorSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cursorsize_)));
          set_has_cursorsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_targetSize;
        break;
      }
      
      // optional float targetSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_targetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetsize_)));
          set_has_targetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_cursorAlpha;
        break;
      }
      
      // optional float cursorAlpha = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cursorAlpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cursoralpha_)));
          set_has_cursoralpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_targetAlpha;
        break;
      }
      
      // optional float targetAlpha = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_targetAlpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetalpha_)));
          set_has_targetalpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_irDiff;
        break;
      }
      
      // optional float irDiff = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_irDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &irdiff_)));
          set_has_irdiff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_bgColor;
        break;
      }
      
      // repeated float bgColor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bgColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_bgcolor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bgcolor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_bgColor;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Display_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double cursor = 1;
  for (int i = 0; i < this->cursor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->cursor(i), output);
  }
  
  // repeated double target = 2;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->target(i), output);
  }
  
  // optional bool touch = 3;
  if (has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->touch(), output);
  }
  
  // optional bool juicer = 4;
  if (has_juicer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->juicer(), output);
  }
  
  // optional bool manual = 5;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->manual(), output);
  }
  
  // optional float cursorSize = 6;
  if (has_cursorsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cursorsize(), output);
  }
  
  // optional float targetSize = 7;
  if (has_targetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->targetsize(), output);
  }
  
  // optional float cursorAlpha = 8;
  if (has_cursoralpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cursoralpha(), output);
  }
  
  // optional float targetAlpha = 9;
  if (has_targetalpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->targetalpha(), output);
  }
  
  // optional float irDiff = 10;
  if (has_irdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->irdiff(), output);
  }
  
  // repeated float bgColor = 11;
  for (int i = 0; i < this->bgcolor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->bgcolor(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Display_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double cursor = 1;
  for (int i = 0; i < this->cursor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->cursor(i), target);
  }
  
  // repeated double target = 2;
  for (int i = 0; i < this->target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->target(i), target);
  }
  
  // optional bool touch = 3;
  if (has_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->touch(), target);
  }
  
  // optional bool juicer = 4;
  if (has_juicer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->juicer(), target);
  }
  
  // optional bool manual = 5;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->manual(), target);
  }
  
  // optional float cursorSize = 6;
  if (has_cursorsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cursorsize(), target);
  }
  
  // optional float targetSize = 7;
  if (has_targetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->targetsize(), target);
  }
  
  // optional float cursorAlpha = 8;
  if (has_cursoralpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cursoralpha(), target);
  }
  
  // optional float targetAlpha = 9;
  if (has_targetalpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->targetalpha(), target);
  }
  
  // optional float irDiff = 10;
  if (has_irdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->irdiff(), target);
  }
  
  // repeated float bgColor = 11;
  for (int i = 0; i < this->bgcolor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->bgcolor(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Display_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool touch = 3;
    if (has_touch()) {
      total_size += 1 + 1;
    }
    
    // optional bool juicer = 4;
    if (has_juicer()) {
      total_size += 1 + 1;
    }
    
    // optional bool manual = 5;
    if (has_manual()) {
      total_size += 1 + 1;
    }
    
    // optional float cursorSize = 6;
    if (has_cursorsize()) {
      total_size += 1 + 4;
    }
    
    // optional float targetSize = 7;
    if (has_targetsize()) {
      total_size += 1 + 4;
    }
    
    // optional float cursorAlpha = 8;
    if (has_cursoralpha()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float targetAlpha = 9;
    if (has_targetalpha()) {
      total_size += 1 + 4;
    }
    
    // optional float irDiff = 10;
    if (has_irdiff()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated double cursor = 1;
  {
    int data_size = 0;
    data_size = 8 * this->cursor_size();
    total_size += 1 * this->cursor_size() + data_size;
  }
  
  // repeated double target = 2;
  {
    int data_size = 0;
    data_size = 8 * this->target_size();
    total_size += 1 * this->target_size() + data_size;
  }
  
  // repeated float bgColor = 11;
  {
    int data_size = 0;
    data_size = 4 * this->bgcolor_size();
    total_size += 1 * this->bgcolor_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Display_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Display_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Display_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Display_msg::MergeFrom(const Display_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cursor_.MergeFrom(from.cursor_);
  target_.MergeFrom(from.target_);
  bgcolor_.MergeFrom(from.bgcolor_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_touch()) {
      set_touch(from.touch());
    }
    if (from.has_juicer()) {
      set_juicer(from.juicer());
    }
    if (from.has_manual()) {
      set_manual(from.manual());
    }
    if (from.has_cursorsize()) {
      set_cursorsize(from.cursorsize());
    }
    if (from.has_targetsize()) {
      set_targetsize(from.targetsize());
    }
    if (from.has_cursoralpha()) {
      set_cursoralpha(from.cursoralpha());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetalpha()) {
      set_targetalpha(from.targetalpha());
    }
    if (from.has_irdiff()) {
      set_irdiff(from.irdiff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Display_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Display_msg::CopyFrom(const Display_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Display_msg::IsInitialized() const {
  
  return true;
}

void Display_msg::Swap(Display_msg* other) {
  if (other != this) {
    cursor_.Swap(&other->cursor_);
    target_.Swap(&other->target_);
    std::swap(touch_, other->touch_);
    std::swap(juicer_, other->juicer_);
    std::swap(manual_, other->manual_);
    std::swap(cursorsize_, other->cursorsize_);
    std::swap(targetsize_, other->targetsize_);
    std::swap(cursoralpha_, other->cursoralpha_);
    std::swap(targetalpha_, other->targetalpha_);
    std::swap(irdiff_, other->irdiff_);
    bgcolor_.Swap(&other->bgcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Display_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Display_msg_descriptor_;
  metadata.reflection = Display_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
