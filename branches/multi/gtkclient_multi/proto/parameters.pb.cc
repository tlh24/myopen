// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Configuration {

namespace {

const ::google::protobuf::Descriptor* units_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  units_reflection_ = NULL;
const ::google::protobuf::Descriptor* channels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channels_reflection_ = NULL;
const ::google::protobuf::Descriptor* radios_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  radios_reflection_ = NULL;
const ::google::protobuf::Descriptor* parameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  parameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  state_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_parameters_2eproto() {
  protobuf_AddDesc_parameters_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "parameters.proto");
  GOOGLE_CHECK(file != NULL);
  units_descriptor_ = file->message_type(0);
  static const int units_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(units, aperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(units, pca_scl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(units, pca_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(units, templates_),
  };
  units_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      units_descriptor_,
      units::default_instance_,
      units_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(units, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(units, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(units));
  channels_descriptor_ = file->message_type(1);
  static const int channels_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, agc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, centering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, pca_mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, pca_max_),
  };
  channels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      channels_descriptor_,
      channels::default_instance_,
      channels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(channels));
  radios_descriptor_ = file->message_type(2);
  static const int radios_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(radios, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(radios, channel_),
  };
  radios_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      radios_descriptor_,
      radios::default_instance_,
      radios_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(radios, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(radios, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(radios));
  parameters_descriptor_ = file->message_type(3);
  static const int parameters_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(parameters, signal_chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(parameters, radio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(parameters, selected_),
  };
  parameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      parameters_descriptor_,
      parameters::default_instance_,
      parameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(parameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(parameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(parameters));
  state_descriptor_ = file->message_type(4);
  static const int state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state, default_configuration_),
  };
  state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      state_descriptor_,
      state::default_instance_,
      state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(state));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_parameters_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    units_descriptor_, &units::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    channels_descriptor_, &channels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    radios_descriptor_, &radios::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    parameters_descriptor_, &parameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    state_descriptor_, &state::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_parameters_2eproto() {
  delete units::default_instance_;
  delete units_reflection_;
  delete channels::default_instance_;
  delete channels_reflection_;
  delete radios::default_instance_;
  delete radios_reflection_;
  delete parameters::default_instance_;
  delete parameters_reflection_;
  delete state::default_instance_;
  delete state_reflection_;
}

void protobuf_AddDesc_parameters_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020parameters.proto\022\rConfiguration\"R\n\005uni"
    "ts\022\020\n\010aperture\030\001 \002(\002\022\017\n\007pca_scl\030\002 \002(\002\022\017\n"
    "\003pca\030\003 \003(\002B\002\020\001\022\025\n\ttemplates\030\004 \003(\002B\002\020\001\"\262\001"
    "\n\010channels\022\n\n\002id\030\001 \002(\005\022\n\n\002ch\030\002 \002(\005\022\014\n\004ga"
    "in\030\003 \002(\002\022\013\n\003agc\030\004 \002(\002\022\021\n\tcentering\030\005 \002(\002"
    "\022\021\n\tthreshold\030\006 \002(\002\022\"\n\004unit\030\007 \003(\0132\024.Conf"
    "iguration.units\022\024\n\010pca_mean\030\010 \003(\002B\002\020\001\022\023\n"
    "\007pca_max\030\t \003(\002B\002\020\001\">\n\006radios\022\n\n\002id\030\001 \002(\r"
    "\022(\n\007channel\030\002 \003(\0132\027.Configuration.channe"
    "ls\"Z\n\nparameters\022\024\n\014signal_chain\030\001 \002(\005\022$"
    "\n\005radio\030\002 \003(\0132\025.Configuration.radios\022\020\n\010"
    "selected\030\003 \003(\005\"&\n\005state\022\035\n\025default_confi"
    "guration\030\001 \001(\t", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "parameters.proto", &protobuf_RegisterTypes);
  units::default_instance_ = new units();
  channels::default_instance_ = new channels();
  radios::default_instance_ = new radios();
  parameters::default_instance_ = new parameters();
  state::default_instance_ = new state();
  units::default_instance_->InitAsDefaultInstance();
  channels::default_instance_->InitAsDefaultInstance();
  radios::default_instance_->InitAsDefaultInstance();
  parameters::default_instance_->InitAsDefaultInstance();
  state::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_parameters_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_parameters_2eproto {
  StaticDescriptorInitializer_parameters_2eproto() {
    protobuf_AddDesc_parameters_2eproto();
  }
} static_descriptor_initializer_parameters_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int units::kApertureFieldNumber;
const int units::kPcaSclFieldNumber;
const int units::kPcaFieldNumber;
const int units::kTemplatesFieldNumber;
#endif  // !_MSC_VER

units::units()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void units::InitAsDefaultInstance() {
}

units::units(const units& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void units::SharedCtor() {
  _cached_size_ = 0;
  aperture_ = 0;
  pca_scl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

units::~units() {
  SharedDtor();
}

void units::SharedDtor() {
  if (this != default_instance_) {
  }
}

void units::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* units::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return units_descriptor_;
}

const units& units::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameters_2eproto();  return *default_instance_;
}

units* units::default_instance_ = NULL;

units* units::New() const {
  return new units;
}

void units::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aperture_ = 0;
    pca_scl_ = 0;
  }
  pca_.Clear();
  templates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool units::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float aperture = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aperture_)));
          set_has_aperture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pca_scl;
        break;
      }
      
      // required float pca_scl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pca_scl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pca_scl_)));
          set_has_pca_scl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pca;
        break;
      }
      
      // repeated float pca = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pca:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pca())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_pca())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_templates;
        break;
      }
      
      // repeated float templates = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_templates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_templates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_templates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void units::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float aperture = 1;
  if (has_aperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->aperture(), output);
  }
  
  // required float pca_scl = 2;
  if (has_pca_scl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pca_scl(), output);
  }
  
  // repeated float pca = 3 [packed = true];
  if (this->pca_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pca_cached_byte_size_);
  }
  for (int i = 0; i < this->pca_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->pca(i), output);
  }
  
  // repeated float templates = 4 [packed = true];
  if (this->templates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_templates_cached_byte_size_);
  }
  for (int i = 0; i < this->templates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->templates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* units::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float aperture = 1;
  if (has_aperture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->aperture(), target);
  }
  
  // required float pca_scl = 2;
  if (has_pca_scl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pca_scl(), target);
  }
  
  // repeated float pca = 3 [packed = true];
  if (this->pca_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pca_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pca_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pca(i), target);
  }
  
  // repeated float templates = 4 [packed = true];
  if (this->templates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _templates_cached_byte_size_, target);
  }
  for (int i = 0; i < this->templates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->templates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int units::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float aperture = 1;
    if (has_aperture()) {
      total_size += 1 + 4;
    }
    
    // required float pca_scl = 2;
    if (has_pca_scl()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float pca = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->pca_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _pca_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float templates = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->templates_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _templates_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void units::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const units* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const units*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void units::MergeFrom(const units& from) {
  GOOGLE_CHECK_NE(&from, this);
  pca_.MergeFrom(from.pca_);
  templates_.MergeFrom(from.templates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aperture()) {
      set_aperture(from.aperture());
    }
    if (from.has_pca_scl()) {
      set_pca_scl(from.pca_scl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void units::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void units::CopyFrom(const units& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool units::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void units::Swap(units* other) {
  if (other != this) {
    std::swap(aperture_, other->aperture_);
    std::swap(pca_scl_, other->pca_scl_);
    pca_.Swap(&other->pca_);
    templates_.Swap(&other->templates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata units::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = units_descriptor_;
  metadata.reflection = units_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int channels::kIdFieldNumber;
const int channels::kChFieldNumber;
const int channels::kGainFieldNumber;
const int channels::kAgcFieldNumber;
const int channels::kCenteringFieldNumber;
const int channels::kThresholdFieldNumber;
const int channels::kUnitFieldNumber;
const int channels::kPcaMeanFieldNumber;
const int channels::kPcaMaxFieldNumber;
#endif  // !_MSC_VER

channels::channels()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void channels::InitAsDefaultInstance() {
}

channels::channels(const channels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void channels::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ch_ = 0;
  gain_ = 0;
  agc_ = 0;
  centering_ = 0;
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

channels::~channels() {
  SharedDtor();
}

void channels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void channels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channels_descriptor_;
}

const channels& channels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameters_2eproto();  return *default_instance_;
}

channels* channels::default_instance_ = NULL;

channels* channels::New() const {
  return new channels;
}

void channels::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ch_ = 0;
    gain_ = 0;
    agc_ = 0;
    centering_ = 0;
    threshold_ = 0;
  }
  unit_.Clear();
  pca_mean_.Clear();
  pca_max_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool channels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ch;
        break;
      }
      
      // required int32 ch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ch_)));
          set_has_ch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_gain;
        break;
      }
      
      // required float gain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_agc;
        break;
      }
      
      // required float agc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_agc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &agc_)));
          set_has_agc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_centering;
        break;
      }
      
      // required float centering = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_centering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centering_)));
          set_has_centering();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_threshold;
        break;
      }
      
      // required float threshold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_unit;
        break;
      }
      
      // repeated .Configuration.units unit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_unit;
        if (input->ExpectTag(66)) goto parse_pca_mean;
        break;
      }
      
      // repeated float pca_mean = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pca_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pca_mean())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66, input, this->mutable_pca_mean())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pca_max;
        break;
      }
      
      // repeated float pca_max = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pca_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pca_max())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74, input, this->mutable_pca_max())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void channels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 ch = 2;
  if (has_ch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ch(), output);
  }
  
  // required float gain = 3;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gain(), output);
  }
  
  // required float agc = 4;
  if (has_agc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->agc(), output);
  }
  
  // required float centering = 5;
  if (has_centering()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->centering(), output);
  }
  
  // required float threshold = 6;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->threshold(), output);
  }
  
  // repeated .Configuration.units unit = 7;
  for (int i = 0; i < this->unit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->unit(i), output);
  }
  
  // repeated float pca_mean = 8 [packed = true];
  if (this->pca_mean_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pca_mean_cached_byte_size_);
  }
  for (int i = 0; i < this->pca_mean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->pca_mean(i), output);
  }
  
  // repeated float pca_max = 9 [packed = true];
  if (this->pca_max_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pca_max_cached_byte_size_);
  }
  for (int i = 0; i < this->pca_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->pca_max(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* channels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 ch = 2;
  if (has_ch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ch(), target);
  }
  
  // required float gain = 3;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gain(), target);
  }
  
  // required float agc = 4;
  if (has_agc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->agc(), target);
  }
  
  // required float centering = 5;
  if (has_centering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->centering(), target);
  }
  
  // required float threshold = 6;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->threshold(), target);
  }
  
  // repeated .Configuration.units unit = 7;
  for (int i = 0; i < this->unit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->unit(i), target);
  }
  
  // repeated float pca_mean = 8 [packed = true];
  if (this->pca_mean_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pca_mean_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pca_mean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pca_mean(i), target);
  }
  
  // repeated float pca_max = 9 [packed = true];
  if (this->pca_max_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pca_max_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pca_max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pca_max(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int channels::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 ch = 2;
    if (has_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ch());
    }
    
    // required float gain = 3;
    if (has_gain()) {
      total_size += 1 + 4;
    }
    
    // required float agc = 4;
    if (has_agc()) {
      total_size += 1 + 4;
    }
    
    // required float centering = 5;
    if (has_centering()) {
      total_size += 1 + 4;
    }
    
    // required float threshold = 6;
    if (has_threshold()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .Configuration.units unit = 7;
  total_size += 1 * this->unit_size();
  for (int i = 0; i < this->unit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unit(i));
  }
  
  // repeated float pca_mean = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->pca_mean_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _pca_mean_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float pca_max = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->pca_max_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _pca_max_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const channels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const channels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void channels::MergeFrom(const channels& from) {
  GOOGLE_CHECK_NE(&from, this);
  unit_.MergeFrom(from.unit_);
  pca_mean_.MergeFrom(from.pca_mean_);
  pca_max_.MergeFrom(from.pca_max_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ch()) {
      set_ch(from.ch());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_agc()) {
      set_agc(from.agc());
    }
    if (from.has_centering()) {
      set_centering(from.centering());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void channels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channels::CopyFrom(const channels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channels::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < unit_size(); i++) {
    if (!this->unit(i).IsInitialized()) return false;
  }
  return true;
}

void channels::Swap(channels* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ch_, other->ch_);
    std::swap(gain_, other->gain_);
    std::swap(agc_, other->agc_);
    std::swap(centering_, other->centering_);
    std::swap(threshold_, other->threshold_);
    unit_.Swap(&other->unit_);
    pca_mean_.Swap(&other->pca_mean_);
    pca_max_.Swap(&other->pca_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata channels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channels_descriptor_;
  metadata.reflection = channels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int radios::kIdFieldNumber;
const int radios::kChannelFieldNumber;
#endif  // !_MSC_VER

radios::radios()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void radios::InitAsDefaultInstance() {
}

radios::radios(const radios& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void radios::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

radios::~radios() {
  SharedDtor();
}

void radios::SharedDtor() {
  if (this != default_instance_) {
  }
}

void radios::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* radios::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return radios_descriptor_;
}

const radios& radios::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameters_2eproto();  return *default_instance_;
}

radios* radios::default_instance_ = NULL;

radios* radios::New() const {
  return new radios;
}

void radios::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool radios::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        break;
      }
      
      // repeated .Configuration.channels channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void radios::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .Configuration.channels channel = 2;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* radios::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .Configuration.channels channel = 2;
  for (int i = 0; i < this->channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int radios::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .Configuration.channels channel = 2;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void radios::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const radios* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const radios*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void radios::MergeFrom(const radios& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void radios::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void radios::CopyFrom(const radios& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool radios::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < channel_size(); i++) {
    if (!this->channel(i).IsInitialized()) return false;
  }
  return true;
}

void radios::Swap(radios* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    channel_.Swap(&other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata radios::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = radios_descriptor_;
  metadata.reflection = radios_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int parameters::kSignalChainFieldNumber;
const int parameters::kRadioFieldNumber;
const int parameters::kSelectedFieldNumber;
#endif  // !_MSC_VER

parameters::parameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void parameters::InitAsDefaultInstance() {
}

parameters::parameters(const parameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void parameters::SharedCtor() {
  _cached_size_ = 0;
  signal_chain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

parameters::~parameters() {
  SharedDtor();
}

void parameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* parameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return parameters_descriptor_;
}

const parameters& parameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameters_2eproto();  return *default_instance_;
}

parameters* parameters::default_instance_ = NULL;

parameters* parameters::New() const {
  return new parameters;
}

void parameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signal_chain_ = 0;
  }
  radio_.Clear();
  selected_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 signal_chain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_chain_)));
          set_has_signal_chain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_radio;
        break;
      }
      
      // repeated .Configuration.radios radio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radio()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_radio;
        if (input->ExpectTag(24)) goto parse_selected;
        break;
      }
      
      // repeated int32 selected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_selected())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_selected())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selected;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 signal_chain = 1;
  if (has_signal_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->signal_chain(), output);
  }
  
  // repeated .Configuration.radios radio = 2;
  for (int i = 0; i < this->radio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->radio(i), output);
  }
  
  // repeated int32 selected = 3;
  for (int i = 0; i < this->selected_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->selected(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* parameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 signal_chain = 1;
  if (has_signal_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signal_chain(), target);
  }
  
  // repeated .Configuration.radios radio = 2;
  for (int i = 0; i < this->radio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->radio(i), target);
  }
  
  // repeated int32 selected = 3;
  for (int i = 0; i < this->selected_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->selected(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int parameters::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 signal_chain = 1;
    if (has_signal_chain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_chain());
    }
    
  }
  // repeated .Configuration.radios radio = 2;
  total_size += 1 * this->radio_size();
  for (int i = 0; i < this->radio_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radio(i));
  }
  
  // repeated int32 selected = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->selected_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->selected(i));
    }
    total_size += 1 * this->selected_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void parameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const parameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const parameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void parameters::MergeFrom(const parameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  radio_.MergeFrom(from.radio_);
  selected_.MergeFrom(from.selected_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_chain()) {
      set_signal_chain(from.signal_chain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void parameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void parameters::CopyFrom(const parameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool parameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < radio_size(); i++) {
    if (!this->radio(i).IsInitialized()) return false;
  }
  return true;
}

void parameters::Swap(parameters* other) {
  if (other != this) {
    std::swap(signal_chain_, other->signal_chain_);
    radio_.Swap(&other->radio_);
    selected_.Swap(&other->selected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata parameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = parameters_descriptor_;
  metadata.reflection = parameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int state::kDefaultConfigurationFieldNumber;
#endif  // !_MSC_VER

state::state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void state::InitAsDefaultInstance() {
}

state::state(const state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void state::SharedCtor() {
  _cached_size_ = 0;
  default_configuration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

state::~state() {
  SharedDtor();
}

void state::SharedDtor() {
  if (default_configuration_ != &::google::protobuf::internal::kEmptyString) {
    delete default_configuration_;
  }
  if (this != default_instance_) {
  }
}

void state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return state_descriptor_;
}

const state& state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameters_2eproto();  return *default_instance_;
}

state* state::default_instance_ = NULL;

state* state::New() const {
  return new state;
}

void state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_default_configuration()) {
      if (default_configuration_ != &::google::protobuf::internal::kEmptyString) {
        default_configuration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string default_configuration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_configuration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->default_configuration().data(), this->default_configuration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string default_configuration = 1;
  if (has_default_configuration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_configuration().data(), this->default_configuration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->default_configuration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string default_configuration = 1;
  if (has_default_configuration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_configuration().data(), this->default_configuration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->default_configuration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int state::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string default_configuration = 1;
    if (has_default_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_configuration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void state::MergeFrom(const state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_default_configuration()) {
      set_default_configuration(from.default_configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void state::CopyFrom(const state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool state::IsInitialized() const {
  
  return true;
}

void state::Swap(state* other) {
  if (other != this) {
    std::swap(default_configuration_, other->default_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = state_descriptor_;
  metadata.reflection = state_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Configuration

// @@protoc_insertion_point(global_scope)
