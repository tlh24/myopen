fixes to stage2 (see also stage2_notes.txt): 
1. nRF24L01 footprint is incorrect. 
2. MAX3421E needs to run on 3V min, not 2.85v.  
	At 2.85V it will work only intermittently! 
3.  Improve the multiplexer footprint. 
4.  PF4 is shared between AFEEN and usb irq.  oops! 
5. RS232 pinout is reversed, left-right. 
6. RS232 shell needs to be grounded.
7. a DAC would be useful for debugging the filter / analog stuff.
8. Doesn't seem to boot reliably when AC power is applied -- check the reset ckt? 
	
Notes on operation: 
1. testing with plexon headstage tester. 4.25V pk-pk in -> 1V pk-pk out
	gain = 10,000 / 4.25 = 2350. 
	in dB: 67dB.  expected = 65 (25+25+15). ok!!
	Lights must be turned off in the room for the mic preamps to work. 
2. Next: test the USB?  if it is oscillating, that is good :)
	it's not, ohwell. 
3. Great, the board boots.. now need to get the sampling working, and have it transmit data. 
4. s-ports enabled. looks like it's running at 300khz - that's a sampling rate of 18.75ksps, right?
	hum, no I' not understanding this correctly.
	The serial clock is running at 5Mhz, and the external clock at 80Mhz. 
	updated the Sclock to run at Cclock/2 -> 120Mhz. isr10 now running at 600khz. 
	but, the mux is not being updated.. 
	fixed, minor difference in portf assignments. 
	muliplexer looks like it's doing something, that's good! 
5. RS232 port would be good to get working, so we can see what's going on in there. 
	will copy some stuff from myopen.
	done.
	baud rate seems to be 77; should be 57600 - but, eh, what?
	looks like the sysclock is running at 160Mhz?  
	seems correct now, though the damn thing is running twice as fast as expected?
6.  now the problem seems to be with the strings - these are not in the bfiny.x file; 
	gcc doesn't know where to put them. 
	fixed, then. 
7.  Strings and rs232 working fine - makes the exception reporrt much easier to read!
	now, on to the analog section, which 'must be bulletproof'. 
8. THS4281 oscillates! need a feedback resistor of ~ 1.5K. Must put this in next board. 
	Actually, it needs 3 resistors - Rf of 1.5K, Rg 3.0K, and a resistor to isolate the 
	ADC - have a 1.5k in there, but maybe it't too big. 
	Noise from the switching signals on the ADC are corrupting the input pin  - 
	and if i can see it on the scope, then it is definintely going to be in the codes.  
	Need to have better layout + series resistors to kill some of the EMI on the clock / 
	data pins (the frame sync will be the same every frame, and is low duty cycle, 
	so we needn't worry about it.)
	Also, need to use wires that are as short and narrow as possible, and as far away from 
	the input pins as possible.
9. LMV1032 oscillate, too, at about 20khz.  some of them become hot.  
	Need to determine which are hot.. but they are so tiny!
	In terms of oscillation, there must be feedback somewhere. 
	ued alcohol to see which amps were producing the most heat .. 
	two of them seemed to be broken.  removed them, oscillation gone! yay!
10.  Want to actually look at the data. use the UART, i guess @ 921600 baud.
	first, make it work @ higher baud. SCK = 128MHz. divisor = 9.
	This does not work - probably the cable is too slow (too high capacitance).  
	Let's try using the USB port, which should run at at least that rate. 
11.  disconnected the USB reset line from portF.7 (also used on AFEEN!)
	and tied it to Vdd.  USB chip now is oscillating, at least. 
12. success! after I powered Vdd from 2 AA batteries (3.15v > 3.0V minimum on the 
	MAX3421.  *MUST* put a 3.3V regulator on there .. or increase the peripheral voltage to 3.1V
	(probably the latter, i think it will make the whole system more reliable?  have to go back and 
	check all the spec sheets.)
13.  Now, see if we can get it to come up as a peripheral...ok, yes!  it's coming up as a USB flash-key, 
	which is what usb headers were last configured as. 
	Let's change that to a serial port. 
	Done!  Works well!
14.  to get it to work, see - http://www.mjmwired.net/kernel/Documentation/usb/usb-serial.txt
	namely - 
	sudo rmmod usbserial
	cd /wherever usbserial.ko is
	sudo insmod usbserial.ko vendor=0x0b6a product=0x5346
	(that's the vendor and serial number of our virtual device). 
	note - should try to increase the clock rate on the SPI bus.. and check this! 
15. now get it to write out data.  want one channel @ full rate (58,823sps), 16 bits = 
	<1mbps, hence USB should be able to handle it. 
	okay, USB SS is not firing. 
	fixed!  problem with my statebased control logic. 
	Now it seems that we really need a client program to display all this data - 
	importing into matlab is not very effective. 
16.  big problem with the MAX usb chip - it really needs to run at 3.3V. 
	I mistakenly plugged it into 4.6V, and think I broke it, shit - does not 
	respond to USB requests properly anymore. guess I'll have to make another board.
17. replaced the max chip.  works again!  yay!
18. changed the pulldown on the reset signal to the max chip from 100k to 4.5k. 
	The processor seems to boot somewhat more reliably - there must be weak pull-ups 
	in PORTF while tristated during boot that keeps the MAX3421 out of reset, 
	hence contending for the SPIO bus. 
19. Now cutecom is crashing after a little bit - and MAX3421's INT pin is high. 
	I wonder why? 
	Looks like it is also high upon boot. 
	GPX pin is oscillating w/ a freq of 1kHz on boot .. ? 
	This square wave stops after cutecom crashes. 
	Looks like the processor goes into complete chaos; at least, that's what the SPI bus looks like. 
	Perhaps this is a result of the overvoltage damage? 
	no, it seems if we write to the 3421 properly, it works; it /is/ a code chaos problem. 
20. Now the problem seems to be that all the samples are exactly the same.. ? 
21. ok, got it transmitting 16-bit samples, but the freq of the 60hz is not right. 
	Let's test the actual transmission with a ramp, and see where the noise/inaccuracy is. 
	Seems to be with the USB - getting dropped packets, wtf. 
	If i fopen the /dev/ttyUSB0 in matlab, and fread it, still get jumps in the ramp - 
	clearly, packets are being dropped. 
	also get jumps in the output - let's try slowing down the SPI bus and see if that helps. 
	maybe the packets are too large? 
	maybe should write them all at once? hmm. I have a feeling that we may be overwriting the MAX's fifo.
	it's probably best to write the whole thing at once. 
	Nope, i looked at the spec sheet and the output fifo is doubled-buffered.
	The issue is with the USB bus - our device seems to come up as a polling-based serial port, 
	at least with the generic driver.  you know what I need?  I need a good book on USB. 
22. I'll try changing the config - no that won't change anything - need to look at the generic USB driver. 
23. Changed the packet size to 64 - the largest supported by the MAX4321 - and now it looks perfect. 
	WTH??!!  anyway, awsome!  now I can fread it in matlab to my heart's content :-)
24.  fread into matlab with the input pins shorted -> mean 1222, std 76.  not so good.  ~= pk-pk 400. 
	That's a noise voltage of 2.7*400 / (2^12 * 2000) = 150uV.  baad. Let's look at the other channel.
25. Other channel, sdt(noise) = 2.5 (samples), pk-pk = 13 more or less.  this is a resolution of 
	2.7*13 / (2^12 * 2000) = 4uV - all with no filtering (filtering may remove more noise). 
26.  Tried channel 'e' (4, first row) & got std(noise) = 49; 16uV; w/ input shorted; getting some AM signal in there.  
	Noise seems very white; little 60Hz. (minus the AM stuff). 
	Will try disabling everything on the proc & see if that makes the signal better.
	Right now If i plug in the artificial monkey, noise goes to hell - it's bad. 
	With no processor activity, noise seems mosly unchanged. 
	Measured, at output of opamp, with input shorted: ~90mV pk-pk.  That's about 45uV at the source (gain = ~2k)
	Measured, at output of opamp, with artificial rat: 200mV pk-pk.  That's 100uV at source. 
	SNR is about 1 (0db).  perhaps we need better amps on the FE? 
	Will test this with plexon headstages. 
27. Checked and the artificial rat/monkey is as labeled - 10,000 attenuation for loop input, 1,000 for audio. 
	Test tone generator is ~ 400mV pk-pk w/ -20dB attenuation selected. 
	Hence, input to the headstage is 40uV.  
	on the output of the opamp, it's about 90mV pk-pk. gain =2200.  Hmm, guess that's correct. 
28. Tested, via plexon, our custom headstages.  (I am assuming that the measurements are accurate?)
	~ 18uV pk-pk noise with input shorted. This is about 2X better than stage2's amps. 
	100uV pk-pk noise with artificial rat.  This is commensurate with stage2's amps.
29.  What about biasing the amp with a AA alkaline battery?  That has low-noise, and may make the input LNA
	work better. Let's record into Matlab. 
	Looks great!  std(noise) = 4.9.  That's  1.6uV.  hmm. Check w/o the battery: std(noise) = 65.82.  
	Now, the question is - are we biasing the amp outside of its operating region? Check with a cap. to gnd.k. 
	This looks like about the same noise as with the input grounded. 
	With the input biased at +800mV (half-dead NiMH), noise is about 2x as much. I wonder why.  
	--> Perhaps that means we should put a cap between each stage?
	Looks like there is a protection diode on the input - with a 1M resistor to a AA battery 
	and a 22uF cap to ground connected to the input, the input floats to 525mV.  (The resistor was passing 1uV). 
30.  Trying to bias to 800mV through a 680ohm resistor to approximate being chained or connected to another LMV1032. 
	Noise goes up dramatically - but is that a function of the battery, or of the voltage? 
	Most likely the voltage, as the 22uf cap should shunt out - or at least color / attenuate - any battery-sourced noise.
	Looks like the bias voltage here is 684mV, battery voltage is 804mV, so the resistor is passing 0.176mA. 
	Which is significantly less than what the LMV1032 can supply.  And is in accordance with there being a protection diode on the input. 
	To quantify: std(noise | bias = 0V) = 117 (w/ a good bit of 60Hz) ; std(noise | bias = 0.684V) = 133. 
	I guess it's not that much different ... just much more high-freq energy. 
	Again, to quantify: noise floor | bias = 0V =~ 77dB ; noise floor | bias = 0.684V =~ 87dB.  
	Hence, about 3x increase in white noise, and hence I should capacitively couple each amplifier stage.
31.  **REMEMBER** to change the solder-mak openings on the MicroSMD-4 footprint prior sending to the foundry!  
	I checked the board, and the pads seem to be the right size (0.275mm), 
	and the holes on the solder paste mask are 0.31mm.  Making the pads square now .. a little extra Au is good.
	