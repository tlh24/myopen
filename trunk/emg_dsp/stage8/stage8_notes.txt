Notes from debugging stage8
February 25 2011
* Most everything works properly on the board -- no hardware errors yet.
* Digikey shipped some incorrect resistors, which is annoying - they 
	have not done this before, to the best of my knowlege - 
	but a relatively easy fix. 
* The new solder paste - ZeroLead no-clean solder paste - 
	http://www.ameritronics.com
	works well, better than previous.  Unfortunately they don't ship with caps. 
* Issue: headstage seems to be transmitting data well (at least looking
	at the control signals).  RX fails about 50% of the time.
	only thing that has changed is the incoming data rate. 
	Hence, let's try writing data more slowly - at original rate.
		same issue.
		probably is something in the radio code.. 
	Perhaps it's a framing isue: SPI clock too slow, some bits get cut off?
		changed rate to 13.3Mhz - no change. 
		Strangely, we seem to get IRQs in the middle of where they should be.
		Notable is we've changed the cycle time from 2us to 1us
		natrually there will be issues.
		Added some extra pipeline stalls, nothing..
		Perhaps should try slowing down the sample clock for the same effect?
		Halved the sample rate -- did not fix problem. 
		Still unreliable packet transmission.
		Must be the radio control code.
		Try the C-version: seems broken! JTAG time.
	C version working.  SPI clock running at 10Mhz, as per asm version.
		primary difference seems to be that the packets are uploaded in bursts, 
		not continuously like the other. try change.
		continuous packet uploading does not break C version for radio controller.
		Let's compare..
		seems there's an extra clearfifo bizness... check if that makes it work.
		radio_clearfifos makes the return packet arrive more reliably, yes.
	Think the radio control routine is the same as the C version -- 
		have not checked with JTAG yet -- 
		but still does not work :-(
		aggregate data rate appears to be about the same
		data bus appears to be active at the right times..
		where are the extra / skewed packets coming from? 
		is this a data content issue? 
February 28 2011
		YES
		changing the data to 0xa5 for all samples fixed the error!  yay!
	Proc seems to be waiting too long for the RX packet. 
		usually the bridge can respond within 360us
		presently we're waiting 780us
		current serial RFS is 29 / was 19 -> equivalent wait of 511us
		Should wait 180 samples; 190 ought to be enough.
			(there are two calls to _get_asm in the loop of waitirq)
	Perhaps I've overestimated the outgoing bandwidth. 
		It takes 1.36ms to transmit 256 bytes (measured)
		It takes 360us for the bridge to turn around and get a response.
		Total is 1.72ms. 
		Frame time, with 7 samples per packet, 56 samples per frame is 1.792ms
		much too close, apparently! 
		setting waitirq to 172 allows the 'stage to work.. not exactly sure why though.
		anything below 160 misses out on TX sent IRQs.
	Really need to fix the data bug - simplest, and best, way is to add AGC. 
		working on AGC: IS (integer signed) mode is
		ESSENTIAL
		when transferring accumulator to register.
March 1 2011
	Got AGC working properly.. finally. 
		Turned out that i hadn't though of the magnitude of the components properly.
	Next, most important issue: make radio transmission reliable. 
		If we transmit 0xa5 for all bytes, all packets seem to get through.
		If we transmit 0xcc, same.
		0xc0, same.
		0x80, same.
		0x00?  same!!
		0xff?  fail!! aha.  I guess.
		0xfe? works..?
		0x01, works.
		XOR data with 0xa5 fails.
		AND data with 0x7f fails.
		AND data with 0xbf fails.
		AND data with 0xdf fails.
		AND data with 0xef fails.
		AND data with 0xf7 fails.
		AND data with 0xfb works.
		AND data with 0xfd works.
		AND data with 0xfe works.
		
		Slowing down the SPORT to half the speed - hence giving more time between 
		SPI transfers - does not fix the issue.
		whattt is it? perhaps contention - something else (nordic?)
		is trying to drive bus?
		Doesn't look that way - the busses are separate. 
		Which byte is it?  can possibly send 0xaa as the first byte, technically only need
		31 bytes payload.
March 2 2011
	(Continuing above)
		Tried sending 0xa8 as the first byte .. reception is still noisy. 
		What if we change the radio channel? 
		Why did this error not appear before?  Is it hardware-dependent?
	trying stage5. 
		it RXes every other packet,  more or less.
		but program does not fit hardware well... hmm.
	trying different radio channel (0) -- no change. 
		same issue. dropped packets. 
	trying to AND data with 0xfe - 8 bit TX to 7 bit - make difference?
		yea.  that works.  WHYYYY?
	Ok, I understand why - the bridge is getting confused by the new packet setup, 
		and is spontanteously going into RX mode during a frame, thereby missing 
		vital packets. 
		What we need to do is re-write the bridge code to accomidate the higher b/w
		and possibly to extend the frame to 16 packets. 
	Trying the processor at 400Mhz -
		looks like the MAD does not work, or does not complete in time, at this frequency. 
		really should increase the core voltage. 
		At a core voltage of 1.0v (was 0.85v), the processor seems to run normally. 
		current is 100ma. (about)
		Stops working just at 0.85v.
		That said, looks like @ 400Mhz we have plenty of time for adaptive noise
		cancellation, if it's decided that will help! 
		(at what place in the pathway should we do this - befroe AGC I guess?)
April 8 2011
	Current consumption: 
	60mA, 4.12v, everything enabled, one LED on 5ma 2.85v -> 3.5ma@ src
		should be 56.5ma w/o LED. 
	47.5ma, 4.10v, two headstages connected, one LED -> 44.0ma @ src
	41.8ma, 4.10v, one headstage connected, one LED -> 38.3ma @ src. 
	----
	each headstage consumes about 6ma from the source. 
	The intans are listed at about 4.1ma each (supplied directly from bat, not switched)
	The ADC is listed at 2mw -> 0.75mA, also supplied from the bat, 
	so we have about 1.2ma unaccounted for --
	probably attributable to computation? 
	or the intans use more current than expected?
	Well, anyway. let's say 60ma, want the thing to run for 24 hours. 
	That's 1440maH.  can get that in a cell phone battery .. easy. yay! 
	do i want to record more than 128 channels? nah. 
	----
	Other things to do: 
	* audio out working on base station. constant rate sample consumption? 
	 variable rate? hm. (fixed)
	* decorrelator in the spare cycles?  (done)
	* fractional gain (done)
	* flat response has inappropraite gain?  (fixed)
	* sample different parts of the signal chain. (done)
	* longer waveform drawing -- should go to the end of the screen in zoom = 0.2
		(done)
	* be able to turn AGC off. 
	* fix the draw bug on neuro-nico. seems to be pre-GPU, since if you switch 
		the indicies of the VBOs, the yellow is then drawn correctly.
		methinks its a 64-bit issue. which is indeed an issue.
	----
April 9 2011
	Tested radio + triple diversity RX -> works very well. 
	Can position the transmitter by the window & not have too too many dropped packets.
	add another filter option? 
April 14 2011
	Implemented 3 versions of LMS: 
	* simple, direct 7 tap filter, error computed via shift >>>
	* pseudo-LMS style, error saturated to +- 1, signal saturated to +- 1
	* summing pseudo-LMS style, sum 3 samples, 4 weights, sum saturated to +- 1, 
		error saturated to +- 1.
April 18 2011
	* Noted that audio output seems to contain pops and clicks; worried that 
	this may be a result of 
	(1) processor operating at a too high clock rate -> errors in math
	(2) errors in transmit pipeline due to stalls. 
	To test
	(1) clocked proc slower. 288Mhz, 720kHz ADC. 
		No change in pops as recorded to disc.  
		the pops seem poisson - most likely the radio is at fault!
		Can we detect these as false spikes? 
	(2) clocked ADC slower. 800Khz -> more cycles to service radio.
		No change in pops as recorded to disc.
	Looking at the data, it is clear that sometimes the packets are *not*
	being sent out on the wire in order - some packets are dropped, but 
	the ones put in their place are not always those dropped. 
	It almost looks like they were hanging around from some old buffer. 
	And this appears poisson ..? Network noise?
	Must be a bug in the stage7 firmware.
	Observations: 
	* Never messes up channel assignment - when channels have two different
		sine wave amplitudes, the pops never exceed that amplitude.
	* Errors are concomitant, generally - the occurr on a per-packet basis
		The only time you only hear on one channel is when the error is less audible 
		on the other channel.
	* Error is alwas preceded by a dropped packet - less noticeable - and an 
		addition of an unkown packet. 
		Is this packet a reminant of an old transmission? 
		Will have to erase after write-out to see! 
	YES, if we clear the buffer to 0, all unkown packets are 0 packets. 
		must be that 'gotx' or 'go tx' is being triggered before the buffer is
		completely full (recall frame = 16 packets; UDP_PACKET_SIZE = 512 = 32*16)
		This implies that packets are being dropped, which is not surprising, 
		even though the radios are right next to eachother..?
		What about antenna diversity? Could be that another antenna RXed the packet.
		Really need to analyze antenna diversity & how the SW degrades. 
		The only reason I have packet transmission tied to RX packet is that 
		this seems like a good pause for servicing eth..
	okay. now the packets are properly dropped rather than having bogus data inserted. 
	Next: check antenna diversity.
		Antenna diversity is working!  any of the three antennas is capable of picking
		up signal. However, three together do not seem to reduce the error rate to zero. 
		perhaps it is exogenous noise? 
		or ethernet interupts? 
		Kinda hard to test the eth theory -- we need to listen to packets!
		Try disabling the audio out? 
			No difference.
			Maybe I should just sleep on it.
	Ok, try to fix the audio out, which is emmiting wobbly shit.
		putting it in only normal mode. lots of staticky noise, probably from having 
		only 16-bit samples. 
		bah, need an antialiasing filter here.
April 19 2011
	Testing headstage current: 
	(everything running, full LMS 320Mhz / 80Mhz / 1Mhz ADC)
	3.11V	75.1ma  (minimum voltage - below this signal is distorted - probably LDO drop-out)
	3.20	73.2
	3.30	71.6
	3.41	69.4
	3.56	67.3
	3.71	65.9
	3.83	64.6
	3.96	63.1
	4.07	62.0
	4.23	60.6
	4.38	59.3
	4.49	58.5
	4.57	57.9
	4.77	56.6
	5.04	55.0
	5.21	54.1
	5.34	53.5
	5.64	52.0
	5.80	50.9
	6.05	49.8
	6.19	49.2
	6.35	48.7
	Linear fit gives: static power consumption 153 mw (with LED!), 24.6mW/V slope
	(so about 25ma static draw, 50ma dynamic @ 3V)
	check: 4V / 150mw = 38.25 dynamic + 25 static = 62.85Ma; actual = 62.15.
	Capacity required with a mean Li-ion voltage of 3.56V - 24*67.3 = 1615maH
	probably want at least 2000maH, or better. 
	could reduce code complexity to reduce power .. but I hope all this stuff is useful.
May 25 2011
	Added template sorting to both headstage and client -- whew. 
	Have to clock the processor at 0.95V, 400Mhz now; 
		let's check the power consumpion.
	3.31	84.2ma	278mw
	3.50	80.5	281
	3.70	77.9	288.23
	Assuming average current consumption of 80ma (note - with LED), 
	one RediLast 2900 battery should power one headstage for 36 hours. 
		(if not more - see 
		http://lygte-info.dk/info/Batteries18650-2011%20UK.html 
		which shows 10.5Wh -> 37hours @ 282mw)
	