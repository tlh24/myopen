Notes from debugging stage8
February 25 2011
* Most everything works properly on the board -- no hardware errors yet.
* Digikey shipped some incorrect restors, which is annoying - they 
	have not done this before, to the best of my knowlege - 
	but a relatively easy fix. 
* The new solder paste - ZeroLead no-clean solder paste - 
	http://www.ameritronics.com
	works well, better than previous.  Unfortunately they don't ship with caps. 
* Issue: headstage seems to be transmitting data well (at least looking
	at the control signals).  RX fails about 50% of the time.
	only thing that has changed is the incoming data rate. 
	Hence, let's try writing data more slowly - at original rate.
		same issue.
		probably is something in the radio code.. 
	Perhaps it's a framing isue: SPI clock too slow, some bits get cut off?
		changed rate to 13.3Mhz - no change. 
		Strangely, we seem to get IRQs in the middle of where they should be.
		Notable is we've changed the cycle time from 2us to 1us
		natrually there will be issues.
		Added some extra pipeline stalls, nothing..
		Perhaps should try slowing down the sample clock for the same effect?
		Halved the sample rate -- did not fix problem. 
		Still unreliable packet transmission.
		Must be the radio control code.
		Try the C-version: seems broken! JTAG time.
	C version working.  SPI clock running at 10Mhz, as per asm version.
		primary difference seems to be that the packets are uploaded in bursts, 
		not continuously like the other. try change.
		continuous packet uploading does not break C version for radio controller.
		Let's compare..
		seems there's an extra clearfifo bizness... check if that makes it work.
		radio_clearfifos makes the return packet arrive more reliably, yes.
	Think the radio control routine is the same as the C version -- 
		have not checked with JTAG yet -- 
		but still does not work :-(
		aggregate data rate appears to be about the same
		data bus appears to be active at the right times..
		where are the extra / skewed packets coming from? 
		is this a data content issue? 
February 28 2011
		YES
		changing the data to 0xa5 for all samples fixed the error!  yay!
	Proc seems to be waiting too long for the RX packet. 
		usually the bridge can respond within 360us
		presently we're waiting 780us
		current serial RFS is 29 / was 19 -> equivalent wait of 511us
		Should wait 180 samples; 190 ought to be enough.
			(there are two calls to _get_asm in the loop of waitirq)
	Perhaps I've overestimated the outgoing bandwidth. 
		It takes 1.36ms to transmit 256 bytes (measured)
		It takes 360us for the bridge to turn around and get a response.
		Total is 1.72ms. 
		Frame time, with 7 samples per packet, 56 samples per frame is 1.792ms
		much too close, apparently! 
		setting waitirq to 172 allows the 'stage to work.. not exactly sure why though.
		anything below 160 misses out on TX sent IRQs.
	Really need to fix the data bug - simplest, and best, way is to add AGC. 
		working on AGC: IS (integer signed) mode is
		ESSENTIAL
		when transferring accumulator to register.
March 1 2011
	Got AGC working properly.. finally. 
		Turned out that i hadn't though of the magnitude of the components properly.
	Next, most important issue: make radio transmission reliable. 
		If we transmit 0xa5 for all bytes, all packets seem to get through.
		If we transmit 0xcc, same.
		0xc0, same.
		0x80, same.
		0x00?  same!!
		0xff?  fail!! aha.  I guess.
		0xfe? works..?
		0x01, works.
		XOR data with 0xa5 fails.
		AND data with 0x7f fails.
		AND data with 0xbf fails.
		AND data with 0xdf fails.
		AND data with 0xef fails.
		AND data with 0xf7 fails.
		AND data with 0xfb works.
		AND data with 0xfd works.
		AND data with 0xfe works.
		
		Slowing down the SPORT to half the speed - hence giving more time between 
		SPI transfers - does not fix the issue.
		whattt is it? perhaps contention - something else (nordic?)
		is trying to drive bus?
		Doesn't look that way - the busses are separate. 
		Which byte is it?  can possibly send 0xaa as the first byte, technically only need
		31 bytes payload.
March 2 2011
	(Continuing above)
		Tried sending 0xa8 as the first byte .. reception is still noisy. 
		What if we change the radio channel? 
		Why did this error not appear before?  Is it hardware-dependent?
	trying stage5. 
		it RXes every other packet,  more or less.
		but program does not fit hardware well... hmm.
	trying different radio channel (0) -- no change. 
		same issue. dropped packets. 
	trying to AND data with 0xfe - 8 bit TX to 7 bit - make difference?
		yea.  that works.  WHYYYY?
	Ok, I understand why - the bridge is getting confused by the new packet setup, 
		and is spontanteously going into RX mode during a frame, thereby missing 
		vital packets. 
		What we need to do is re-write the bridge code to accomidate the higher b/w
		and possibly to extend the frame to 16 packets. 
	Trying the processor at 400Mhz -
		looks like the MAD does not work, or does not complete in time, at this frequency. 
		really should increase the core voltage. 
		At a core voltage of 1.0v (was 0.85v), the processor seems to run normally. 
		current is 100ma. (about)
		Stops working just at 0.85v.
		That said, looks like @ 400Mhz we have plenty of time for adaptive noise
		cancellation, if it's decided that will help! 
		(at what place in the pathway should we do this - befroe AGC I guess?)