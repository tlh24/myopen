errors in the schematic
1 - DR1PRI is not brought out, who knows why... but it looks okay.
2 - no electrolytic capacitor needed.  battery + ceramic is good enough.
3 - need caps on all parallel-port driven inputs / outputs (especially the _cs - 33 or 100pf).

notes from debugging stage5. 

August 3 2010 -- 
	Got it booting to USB; no serial port as I bought the wrong ADUM3202 package.
	The secret is to disable Vcc - processor internal voltage - while programming!
		(should have thought of this before)
	seems quite a bit of current is being dissipated on the 3V supply - 
	perhaps there is a short somewhere? 
	seems more likely to be an open circuit than short, as the solder paste volumes with the 
	Pololu stencils are small. 
	Hmm. What is connected to that net?  Just the RHA2116s - perhaps I've got them 
	hooked wrong, and a diode somewhere is dissipating the current? 
	Let's see if the power disipation is within spec. 
	it's dropping ~ 1.75V.  Each RHA2116 should dissipate 5mw -> 
	10mw, or 3.3mA.  say 3.5mA.  the regulator should hence be dissipating 6mw. 
	It is almost certainly dissipating much more than that!  why? 
	Also, the gain seems low. 
	
	Another mystery - DR1SEC is oscillating.  It should be driven by the ADC7476.  wha? 
	(oscillations perhaps because of a bad ball connection below the blackfin?)
	Checked it again, and it looks okay - there is an error in the schemactic, noted above.
August 4 2010 --
	Intan chips still consuming too much current. Tried reflowing them, 
	no clear change.  Also reflowed the blackfin; seem to have resolved some open 
	ckts there.  
	Intan chips - specifically the 3.0V LDO - get hot independent of the presence 
	of Vcc or Vdd.  (1.2 and 2.85v, respectively).  
	One thing to note: I think it's isolated to the bottom chip. The top chip shows normal 
	bias voltages across the three bandwidth-setting resistors. 
	I'm going to ignore the bottom chip and work only with the top one. 
	So: let's get the wireless working. 
	no, no, first get clean samples from the headstage. 
August 7 2010 --
	Removed the bottom intan chip.  3V LDO no longer dissipating tons of heat = good. 
	I seems that many of the inputs to the intan chip were not connected - 
	Namely pins 1-10, excluding pin 9. 
	Hence, only DVdd and DGnd were set - which is why the chip was heating up so much. 
		(This implies that the other chip may have open-circuits underneath, too!)
	Still have strange sampling-locked noise on the input of the ADC. 
	According to the schematic and layout, there shouldn't be anything else connected
	to the muc pin - ??
	The input to the ADC is a square wave that goes high the instant RFS goes high, 
	and falls 6.4us later - about 3 bits before the conversion is done. 
	Perhaps the ADC is a bit broken... ? e.g. there is leakage when the track circuit is enabled?
	Bottom ADC shows the same waveform, but it's not connected to anything. 
	----
	Anyway, input referred noise, with the input hooked to the plexon artificial rat
	is 10uV RMS.  This was measured by recording via USB, lowpass filtering to 5khz 
	(sampling rate set to 100ksps), and taking the std. I think this is reasonable?
	----
	Supply voltage are all close enough to not turn on any ESD protection diodes, I think. 
	RHA2116 is at 3.018V. 
	ADC is at 2.701V
	Blackfin is at 2.872V. 
	The biggest difference is between the ADC and RHA2116, which is still only 300mV - 
	and the connection between them is just signal and ground. 
	----
	Let's test the gain. Input signal 4.5V pk-pk.  after plexon -> 450uV pk-pk. 
	hum.  I don't see a sine wave. that's not good. 
	Yea, I can't find the signal via fft, either, though it seems to be there on the 'scope. 
		(with a good bit of noise from the sampling-locked noise mentioned above). 
	The noise amplitude is about 100mV; the signal amplitude is approximately the same. 
	Input-referred, that's 500uV, okay, chip is probably working. 
	the SCK signal seems to be coupled to the input of the ADC, with 
	the ADC off (no clock or frame sync) and the muliplexer off (no step signal). 
	Let's look at the layout for that. 
	There is no good reason for the two to be connected - 
		they are not so close together in the layout; must be connected through input amplification?
	This appears to have been a result of an open connection on the board.
	----
	Reflowed the board, put the 'broken' RHA2116 back on - now it seems to work. 
	Unfortunately, the omentics connector fell off in the process. 
	The problem is clearly the SOLDER PASTE- too little, and it does not wet the devices well 
	(the nRF24L01 may have some open circuits, and it's interfereing with the flash - 
		could try reflowing that if i want to destroy more shit)
August 9 2010 --
	reflowed the radio. board does not even get past the manufacturer ID without nRF24L01
	on there!  Radio does, however, seem to be soldered corectly - at least now. 
	reflowed the blackfin, again; perhaps there is a cold joint, but all pads and balls 
	appeared to have solder / solder paste, so there (theoretically) should be no open-circuits. 
	there is also the possibility that traces within the board are broken; will need to make another.
	----
	blackfin shorts Vdd. removed it; observed too much solder paste under the balls. 
	will have to decrease apeture of associated solder paste mask.
	behavior of the board without blackfin: still errors in writing the flash. 
	specifically, the last segment of the first page is all zeros. 
	modified the program, and now get the stuck-byte problem: same byte is written to flash
	(or read from flash) for many memory locations in a row. 
	Looks like it's a memory read error - the pattern changes with two serial reads, 
	though the error seems to start around the same point.
	Weird, I do it again, and the read seems repeatable, with only 2 errors - and the errors are 
	consistent. 
	And now it all works ??!! what the?  Must be a flaky connection somewhere. 
	Perhaps the level translators? hmm. Flah voltage is correct, in any case. 
	-----
	Trying to test communications in the simplest way possible - requesting the flash to ID itself, 
	over and over agian. 
	At first, it wouldn't work, but now it's quite reliable. WHY??
	It looks like interupptions to the power are sufficient to cause strange and undesired response
	post-query - let me try removing the electrolytic.
	YES that fixed it.  why, oh so why? 
	Also to note: 
	* removed printf statements during program sequences. 
	* killed X.
	Need to mantain constant clock rate!! 
	Now, put the blackfin back on there, I guess.
	Done.  works!  comes up as /dev/ttyUSB0 !
	Both Intan chips appear to be working, despite all the reheating I've done to them! 
	----
	Next, to measure the signal and noise quality of the digitized data. 
	Don't have an omnetics connector on there - in a box, it's 23uV RMS noise.
	Not too bad for no input and possible contamination from USB. 
	need to test this with input shorted, I guess. Or, better, a real input. 
August 10 2010 --
	reflowed the nRF24L01 twice, the PA supply was not connected. works now, apparently. 
	check the data. 
	Now the flash isn't coming up $%^#!
	** Need caps - 100pf maybe - on all the parallel-port driven signals!! **
	finally - everything seems to be working! Need to debug the packetization. 
August 11 2010 --
	Debugging packetization: is it the write or the read? 
	Disable write; fill buffer up with known pattern. 
	looks like we are missing packets? No, the interrupts indicate otherwise. 
	start byte = 
	00, 40, 80, c0 (repeats 4 times) 00 c0 80 40 80 c0 
	another trial: 
	20 60 a0 e0 (repeats 8 times) a0 60 a0 e0 a0 60 20 60 a0 e0 20 60 a0 e0 20 60 a0 e0 20 60 a0 e0
	Ok, first task is to determine why every-other packet is dropped. 
	pretty sure it's the USB. yep, fixed!
	now need to check fidelity, I guess - matlab.
	matlab: looks like within a packet, everything is in order, though packets may come out-of-order.
	is this a programmatical error, a USB error, or a radio error? 
	The pattern seems to be repeating: 8 clear ramps, unordered pkts, 
		8 clear ramps, unordered pkts, ditto, 
	1 ramp = 256 bytes = 8 packets. Let's make sure it's not the USB, then.
	It is USB! write a known pattern via SPI, and it appears the linux kernel reorders them. 
	This is at the relatively low rate of 8 packets every 17ms -> 14.3kbytes/sec (115kbits/sec). 
	Hum. may have to timestamp them on the radio-> USB bridge. or just fix the problem.
	Another thing: looks like there are unequal number of instances of each octet. 
	In a 640 packet stream, some are 76, some are 86. should be 80. 
	Perhaps this is because the packets come in bursts?  Would buffering them help?
	Upon noticing that the SPI clock was still running after nRF_CSN went high, 
	tried switching from DMA-controlled SPI read-in to processor control 
	- no change in transmitted data, though, still unordered packets. 
	Looking at the USB_IRQ right now, and it's pretty clear that we are overfilling the output 
	buffers during a radio burst - doh - sure would prefer ethernet here! 
	Maybe next time i use a FDTI device? Ugh, re-engineering. perhaps ethernet is better.
August 12 2010 --
	Using libusb to read from the device; works much better, though the packets seem to be
	reversed within the read.  I'm not sure why.  The bytes on the wire are, at least according
	to the /dev/ttyUSB0 interface, in order.  
	Bytes within the 64-byte packets are in order, however. 
	Diff(recorded data) has only 3 values: +129, 1, -127.
	Reversed packet order is independent of buffer length 
		- at least for lengths 64*16 or 64*4 bytes.
	Changed this, no idea why it would be reversed, but easy fix. cough, Fixed!
	----
	Next, the radio. uh - it's back to being disordered. - seems to depend on initialization?
	Tried it again, looks good, no (none!) errors! this means the radio tx code is good.
	----
	Now, can use this to debug continuous data (not just ramp) transmission.
	Turned back on p3 (WFBUF write pointer). 
	Does not look correct - samples are saturated, 0xfff5; 0xbaadc0ed occurs aperiodically
	intervening bytes: 56, 12, 56, 132, 104, 64 ...
	ah, was writing *words* (16 bits) not *bytes*.  now it looks good, only the samples are 0xff..
	seems that there is ~1 lsb of noise in the system.  humm.
	channel 1: all 0x91 0r 0x91 lsbyte. 
	channel 16: all 0x98
	another problem: tx chan only goes to 16.. ? ah, that is correct given the code. 
		fidelity looks fine with this; removed the packet reordering; why did we need it before??
	note!!  seems you can only write to a full register when reading from the serial ports -
		e.g. r0 = w[p0] (z) ; 
		that's silli!
		but now the signal looks okay (from only one of the chips - the bottom - the top one is hot)
	----
	finally, got the radio working properly - at least to some degree / resolution. 
	now it seems that whenever there  channel is changed, there is a good bit of noise on the output.
	but .. not always, not on all channels.  perhaps only on the channels that are floating? 
	see http://m8ta.com/index.pl?pid=839
	Seems to be the radio - artifact is clear when PA turns on.
	No!  radio transmission disabled, PA disabled, SPI still active - strong artifact!
		(this means that there is / should be sufficient isolation between radio and input. 
		that is not to say it couldn't be larger - !)
	SPI needs to be re-routed here, we need it to boot, etc.  shiiit. 
August 13 2010 --
	Reflowed the top RHA2116 - still does not work.  consumes a lot of power. 
		Bummer, I was very careful this time. 
	rerouting the MISO line & grounding the existing trace seems to fix the interference problem.
		On the next revision, need to *not* do this!
		Anyway, can debug filter.
	Let's looks at this again: data comes in at 12 bits.  have 15 bits plus sign of headroom - 
		so total gain through the filter should be 16., or 2 per biquad.
		(have 4 biqads to work with).
	First biquad = okay. 
	Second biquad = saturating @ 0x7f.  shiit.
August 15 2010 --
	Figured out the filter problem - had a += instead of = on the b[0]*x multiply. oops.
	Now the output is oscillating back n forth every 1,2,3 samples
	Seems to occur after 2 biquads - checking with just FIR filters. looks okay.
	try leaky integrator?
	yes, that works - but after a while sharp edges re-appear. not sure why. 
	looks like some part of the recording system - perhaps the USB - is getting hose'd . 
	Seem it shifts into and out of proper ordering -- but why? 
	Seem not to be the filters themselves. 
	No, rather it seems we are dropping packets predictably - after making a sine wave generator, 
	see that there is a pattern to diff(b3).  hummhum. mysteries abound!
	decision: usb sucks, use ethernet. yesyes yall// and I've got the EMG board right here!
	another decision: move away from the maxim chip, and toward FTDI 2322H.
August 16 2010 --
	Time is running out before the next trip. What is the most efficient use of my time? 
	Redesign the board & get it shipped out by .. Thurs?  Not likely, given the complexity.  
	Well, is the USB bug irrecoverable?  can we figure out what is causing it, and fix?
	I presume it is because a USB packet is being overwritten while in the outgoing fifo.  
	(this same problem again... damnit). 
	Buffer the outgoing data? in a circular buffer?
	Need to check to see if the outgoing buffer is emptied -- yea, the IN2BAVIRQ bit.
	okay, fixed that.  are we completely sure that it's the USB and not radio? 
	better check with ramp.
	yea, we still get errors with the ramp - occasional jumps of 65, which corresponds to 
	lost USB packets. damnit, gina! 
	This seems to occur very consistently after the start of a new ramp. 
	radio packets are 32 bytes, 8 of them -> 256 bytes, same as wrap period of ramp. 
	so jump occurs on the second radio packet - i think? 
	It jumps from -111 to -46.  hum, might have a 16 offset here in the ramp signal.
	BUT, the error only occurs every 4th frame - and this is consistent.
	perhaps it is the reading program?  this is 1024 bytes, which is what the buffer is set to.
	try smaller buffer.
	NOPE, it was a bug in the recording program.  USB works perfectly now!! YAY. 
	test with radio -- much better. still, some dropped packets, but not so bad.
		16 in 140samples = 16 in 5028 samples = 0.0032 error rate. hm. could be better?
		perhaps my radio is imperfect?
	With radios right next to eachother - 
		37 dropped packets in 12734 packets = 0.0029 error rate. 
		Assuming that chksum discards in case of one error, this is a BER of 1.1e-5
		could turn off checksumming.
	Okay, what next? filters, test the filters.
		filters don't look good - not smooth enough, not enough lowpass action
		(compared it to the same result computed in matlab). 
		First lowpass is certainly not working -- lots of fs/2, fs/3, fs/4 noise.
		period is not correlated with digital pipeline - 208 samples, def. 60hz noise.
		sign of the coefs? hmm. 
		Tested design procedure in matlab, filter works as expected (w/ some phase delay)
August 17 2010 --
	Testing the filter; seems to have the correct sensitivity to the different parameters. 
		(at least for sine wave generation). 
	Now testing impulse response.  Definantly different! In matlab, the main pulse is 6 samples.
		In blackfin, 4 samples.
	Looks the same in the C fixed-point test. 
	after fiddling with the coeficients, looks like B tapped delay is not right!!
	Reimplemented it, still messed up - guess I'll try pure FIR? 
	Waaaait a second, this is pre-downsampling!  of course we're missing the middle sample. 
	D'oh. 
	Also: looks like we are saturating. really need AGC. otherwise, impulse response okay (for lp)
	with all filters, the impulse respones looks fine. Test with realish data. 
	Hmm.  try turning down the gain?
	Nope, looks like the filter output is correct. 
	Also -- seems like butterworth filters behave better on the real data than elliptic.
		better phase characteristics.
	Well, anyway, what's the next task?  I guess get the thresholding --
		and decide if we want incoming bandwidth. Probably, yes.
		Needn't be much - one packet after every frame? this will make 
		the radio routine longer :-/  well.