<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" styles="unlocked" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="137" xmlns:dc="http://purl.org/dc/elements/1.1/" fileformat="1.0" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="0.99.2" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:en-US; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="dc.format">application/x-abiword</m>
<m key="abiword.generator">AbiWord</m>
</metadata>
<history version="15" edit-time="270293" last-saved="1247604311" uid="cf8b7c94-6cec-11de-8e84-9117ba845f2f">
<version id="12" started="1247189183" uid="2a0c7dd0-6d06-11de-8e84-9117ba845f2f" auto="0" top-xid="40"/>
<version id="15" started="1247345755" uid="39d8d1a0-70b7-11de-8a00-e65d94f592d4" auto="0" top-xid="133"/>
</history>
<styles>
<s type="P" name="Normal" followedby="Current Settings" props="font-family:Times New Roman; margin-top:0pt; color:000000; margin-left:0pt; bgcolor:transparent; widows:2; font-style:normal; text-indent:0in; text-position:normal; margin-bottom:0pt; font-weight:normal; line-height:1.0; text-align:left; font-variant:normal; text-decoration:none; margin-right:0pt; font-size:12pt; font-stretch:normal"/>
<s type="C" name="Reference" props="font-size:10pt"/>
</styles>
<pagesize pagetype="Letter" orientation="portrait" width="8.500000" height="11.000000" units="in" page-scale="1.000000"/>
<section xid="10" props="page-margin-footer:0.5in; page-margin-header:0.5in">
<p style="Normal" xid="11">Tim Hanson</p>
<p style="Normal" xid="1">Myopen Project: An open-source, open-hardware electromyography processor. </p>
<p style="Normal" xid="2"><c></c></p>
<p style="Normal" xid="3">Introduction. </p>
<p style="Normal" xid="88">* We want to make<c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"> a device that turns EMG signals into control signals for a prosthetic, computer, or video game.  </c><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="4">* Platform should be low-cost and broadly accessible to hobbyists, researchers, prosthetic users, and anyone else who wants to hack it or build upon it.   </p>
<p style="Normal" xid="15">* Make the system entirely open - no closed-source software needed to make or use it.  </p>
<p style="Normal" xid="16">* Sell the resulting device as an assembled kit, first to researchers.  </p>
<p style="Normal" xid="18"><c></c></p>
<p style="Normal" xid="5">* In it's present implementation: </p>
<p style="Normal" xid="6">**16 channels of differential EMG. </p>
<p style="Normal" xid="17">*** Full 4kV isolation, ESD input protection. </p>
<p style="Normal" xid="9">** 2 pole highpass (10Hz), 2 pole lowpass (400Hz)</p>
<p style="Normal" xid="8">** 4ksps, 13 bit digitization. </p>
<p style="Normal" xid="12">** 600Mhz Blackfin processor</p>
<p style="Normal" xid="13">** 32MB SDRAM, 120Mhz. </p>
<p style="Normal" xid="14">** Ethernet, RS232, USB, TWI/I2C, LCD, JTAG. </p>
<p style="Normal" xid="19"><c></c></p>
<p style="Normal" xid="21">* show the picture of the device here .. </p>
<p style="Normal" xid="22"><c></c></p>
<p style="Normal" xid="23">* Analog Devices Blackfin processor</p>
<p style="Normal" xid="24">** Low power - 0.18mW/MAC, high speed, great for DSP, has an ethernet MAC, </p>
<p style="Normal" xid="25">** relatively easy to layout - 0.8mm BGA does not necessitate blind/buried vias, can be hand assembled (with care!).  </p>
<p style="Normal" xid="26">** Open toolchain available: GCC has been ported to the platform, as has libc &amp; ucLinux. </p>
<p style="Normal" xid="28">** If the code is small enough, applications can run entirely from cache / external memory not required.  Large flash devices are not needed, either - can boot from a 8-pin SPI flash.  (This makes routing the board easy.)</p>
<p style="Normal" xid="41">** Presently SDRAM only used for outgoing ethernet transmissions.  </p>
<p style="Normal" xid="29">** Level of complexity well matched for the task to be done - we are not running a smartphone here! </p>
<p style="Normal" xid="27">** (Most importantly) I am familiar with the architecture &amp; the assembly language.  </p>
<p style="Normal" xid="30"><c></c></p>
<p style="Normal" xid="31">Interfaces: </p>
<p style="Normal" xid="32">* Ethernet 10/100.  Ubiquitous, cross-platform, very well documented (but not necessarily easy).  (will talk later about how it is used on our platform).  </p>
<p style="Normal" xid="33">* USB.  Even more ubiquitous!  Presently using a Maxim 3421E, which allows both peripheral (board looks like a USB HID keyboard, mouse, and/or mass storage device) or host (Plug in your USB keyboard, mouse, or mass storage device).  </p>
<p style="Normal" xid="35">** Can be powered or can power through the USB bus.  </p>
<p style="Normal" xid="36">* RS232 - Ubiquitous on development platforms, critical for debugging. </p>
<p style="Normal" xid="37">* JTAG - Ditto. </p>
<p style="Normal" xid="38">* LCD - Old Nokia 128x128 serially addressed display.  Not used much - RS232 has a much larger screen attached to it.  Yet this is critical for end-user adoption. </p>
<p style="Normal" xid="39">* TWI/I2C - connector for  the Lego NXT system, as well as any other hobbyist / research serial interfaces.  </p>
<p style="Normal" xid="40"><c></c></p>
<p style="Normal" xid="42"><c></c></p>
<p style="Normal" xid="54">PCB</p>
<p style="Normal" xid="57">* Schematic designed in Kicad.  For this project, I added multiple sheet hierarchical instancing to  kicad, so that I could have one schematic for each of the 16 duplicated channels.  About a month of coding off and on in C++ - bad for me but good for everyone else.  Made me decide not to use C++ for complicated datastructures.  </p>
<p style="Normal" xid="58">*  Started PCB layout in Kicad's PCBNEW, but I decided that I could do better, so wrote my own layout program - Kicadocaml.  Features fast OpenGL interface, push routing, cross probing, triangle-mesh zone calculation (also from scratch), hierarchical schematic comprehension, and can control a pick and place robot.  </p>
<p style="Normal" xid="63"><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US">* PCB fabricated on 5mil trace/space rules, 0.8mm BGAs, 6 layer stack.  Approx 4x3".  </c><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="64" props="margin-top:0.0000in; margin-left:0.0000in; text-indent:0.0000in; dom-dir:ltr; margin-bottom:0.0000in; line-height:1.000000; text-align:left; margin-right:0.0000in"><c props="font-family:Times New Roman; font-size:12pt; lang:en-US; text-position:normal; font-weight:normal; font-style:normal; text-decoration:none">* Assembled by hand on one board, solder paste applied to a second, parts transferred, and then board is reflowed in a toaster oven.   </c><c props="font-family:Times New Roman; font-size:12pt; lang:en-US; text-position:normal; font-weight:normal; font-style:normal; text-decoration:none"></c></p>
<p style="Normal" xid="65" props="margin-top:0.0000in; margin-left:0.0000in; text-indent:0.0000in; dom-dir:ltr; margin-bottom:0.0000in; line-height:1.000000; text-align:left; margin-right:0.0000in"><c props="font-family:Times New Roman; font-size:12pt; lang:en-US; text-position:normal; font-weight:normal; font-style:normal; text-decoration:none"></c></p>
<p style="Normal" xid="55" props="font-family:Times New Roman; font-size:12pt; color:000000; lang:en-US; text-position:normal; font-weight:normal; font-style:normal; text-decoration:none"><c></c>Firmware: </p>
<p style="Normal" xid="43">* Bare-metal executable - no OS, no memory management etc.  Flexibility and speed at the expense of needing to develop &amp; debug your own code. </p>
<p style="Normal" xid="45">* Why? </p>
<p style="Normal" xid="51"><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US">** Nobody is paying me, so i can make bad engineering decisions in favor of good motivation decisions: </c><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="47">** It's fun.</p>
<p style="Normal" xid="46">** You only understand it if you implement it.  </p>
<p style="Normal" xid="48">** If you write it all from scratch, then debugging is easier as you have an good internal model of code and data flow.  (I don't have a good internal model of linux's code, data, and interrupt flow .. besides, it wouldn't fit into cache, so would execute more slowly. )</p>
<p style="Normal" xid="44">* Will try using linux in the future; will most likely allow faster development and slower debugging. </p>
<p style="Normal" xid="52"><c></c></p>
<p style="Normal" xid="53">Firmware, continued: </p>
<p style="Normal" xid="66">* Bulk of the code is to operate the interfaces:</p>
<p style="Normal" xid="67">** Ethernet</p>
<p style="Normal" xid="68">*** Packet control, ARP, DHCP, ICMP, IP, UDP, TCP, HTTP. </p>
<p style="Normal" xid="69">** USB</p>
<p style="Normal" xid="70">*** HID mouse, keyboard, and mass storage device implemented.  SCSI decoding for the mass storage device ongoing; then need FAT32 library. </p>
<p style="Normal" xid="71">** Open source tools like Wireshark and Usbmon were/are invaluable in the development.</p>
<p style="Normal" xid="80">* Assembly code for 2-stage boot &amp; Initialization. </p>
<p style="Normal" xid="81">* Small utility functions / print to RS232 &amp; the LCD. </p>
<p style="Normal" xid="72">* Remainder of code is to operate the data acquisition; this is entirely in assembly. </p>
<p style="Normal" xid="73">** Fast LMS to cancel 60Hz noise</p>
<p style="Normal" xid="74">** Also implemented digital IIR downsampling/dithering filters.   </p>
<p style="Normal" xid="75">* Executable only 29kB.  </p>
<p style="Normal" xid="82"><c></c></p>
<p style="Normal" xid="83">Firmware, near future: </p>
<p style="Normal" xid="85">* Need decoding algorithms!  This is slightly difficult, as the blackfin is a fixed-point processor, and all algorithms to date use floating-point calculations. </p>
<p style="Normal" xid="84">* In parallel we (intern) have been working on a means to train the algorithms using .. javascript running on a client computer, communicating with the Blackfin host through AJAX callbacks.  (show peter's working prototype). </p>
<p style="Normal" xid="89">** Javascript is slow, but it is easy to write, extremely popular, and hence well documented. </p>
<p style="Normal" xid="90">*** Using (&amp; improving) an open-source matrix library for javascript. </p>
<p style="Normal" xid="91">*** Google  chrome makes performance tolerable. </p>
<p style="Normal" xid="92">*** Moves much of the algorithmic complexity to a mature platform for which many tools exist.  </p>
<p style="Normal" xid="94"><c></c></p>
<p style="Normal" xid="95">* Ultimate goal is to leave only rudimentary boot code on Myopen, enough to start all functions and emulate a USB flash key.  User then compiles code for the device, drags it onto the key, and the processor executes it.  </p>
<p style="Normal" xid="96">* Device also implements a USB to serial port device, so that developers can access a terminal/debug info.  </p>
<p style="Normal" xid="93">* As you can see, much of the raw work is in software, which makes sense since the auditing/feedback loop for software (even embedded firmware) is much faster than hardware.  Hardware checking/auditing involves a lot of imperfect mental simulation, which is why we board engineers cling to simple abstractions...or FPGAs. </p>
<p style="Normal" xid="78"><c></c></p>
<p style="Normal" xid="79">* Future directions: </p>
<p style="Normal" xid="97"><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US">** Next revision of the board should use a ARM processor, like the Beagleboard.  Much more popular, but also more power, and possibly more difficult layout if and OMAP3 is chosen. </c><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="98"><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US">** Have a better analog section point-to-point wired in demo board; need to integrate this tested design into the board. </c><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="99"><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US">*** Features one high-pass pole at the instrumentation amplifier, helping to cancel out DC offsets on the electrodes. </c><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="100"><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US">*** Still not as good as the Delsys amplifiers.  It's closed hardware .. but I can open it :-)</c><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="101"><c props="font-family:Times New Roman; text-decoration:none; color:000000; font-size:12pt; text-position:normal; font-weight:normal; font-style:normal; lang:en-US"></c></p>
<p style="Normal" xid="76">Thoughts on the development process: </p>
<p style="Normal" xid="102">* More often than not, I've used bits of hardware and software from  completely unrelated projects. This calls into question the fear that companies have of their designs being stolen and duplicated.  This will only happen if they are egregiously overcharging for something that can be easily duplicated; otherwise, people will take open hardware and make something new with it.  They have no incentive to make a duplicate, since it's almost always easier to buy something than figure out how to physically duplicate it.  </p>
<p style="Normal" xid="103">* This goes back to the fundamental nature of specialization in human society.  Sure, I could figure out how to butcher my own meat, but I don't want to spend the time. </p>
<p style="Normal" xid="104">* Besides, most hardware is open / openable anyway.  Even the xbox360. </p>
<p style="Normal" xid="106">* Roughly, many companies derive money off of informational gradients - they know more than the consumer.  Problem is that the internet tends to destroy all information gradients, and furthermore it has a tendency to encourage the development of tools that further destroy information gradients. </p>
<p style="Normal" xid="107">** Why?  Because money is not the only thing that guides human behavior!  People are willing to develop code for recognition, attention, the wonderful human pleasure of creation/craftsmanship/artistry, and the more base human pleasure of destroying another individuals information gradient.  </p>
<p style="Normal" xid="108">** The heyday of informational gradients are gradualy drawing to a close - anything that can be digitized and shared will be.  Companies need to come back from the informational world to the real world, and derive revenue from efficiency in the real world (logistics, economies of scale, factories, automation, skilled workers, pure organization) and attention (google).  </p>
<p style="Normal" xid="110">* Put another way, we intend not to make money on an informational gradient - keeping others sub-informed about our designs when they could be doing amazing unanticipated things with it (or even better, fixing it).  Rather, we intend to make money by manufacturing boards at a larger scale and lower cost than individual consumers. Eg. specialization in society. </p>
<p style="Normal" xid="112">* And when the Chinese duplicate it using exactly the same design:</p>
<p style="Normal" xid="113">1.  They have to release their code too.  GPL.  At least the consumer wins. </p>
<p style="Normal" xid="115">2. Was that not our original purpose anyway? </p>
<p style="Normal" xid="117">3.  If we had kept it closed, would that have slowed them at all?  Does Microsoft  sell Office for $200 in China? </p>
<p style="Normal" xid="114">4.  I'd rather be creating something new than managing a supply chain and factory.  (Hence, academia.)</p>
<p style="Normal" xid="118"><c></c></p>
<p style="Normal" xid="119">My (socialist) theory: </p>
<p style="Normal" xid="120">1.  Some endeavors which produce data/information if public utility should be funded by the government, e.g. science. </p>
<p style="Normal" xid="122">2.  Manufacturing has to be capitalistic ... it's good at it. does not seems good for information? </p>
<p style="Normal" xid="123">3. Why is an open source model more efficient than the capitalistic model (the alternate justification is that it's just 'right')</p>
<p style="Normal" xid="125">3.1 it is more likely that the best idea works - as opposed to the best marketed idea</p>
<p style="Normal" xid="126">3.2 knowlegeable people feel an obligation to provide their expertise to the project</p>
<p style="Normal" xid="127">3.3 Code and information can be forked at any time if it appears that a new avenue is better - with near perfect reuse. </p>
<p style="Normal" xid="128">3.4 People who do it are necessarily very motivated and more knowledgeable perhaps than a hierarchal corporate code factory. </p>
<p style="Normal" xid="129">3.5 reuse, resuse, resuse - this is just plain old more economicalle efficient. </p>
<p style="Normal" xid="131">3.6 The feedback loop for auditing is shorter, which allows error to be fixed more quickly (e.g. by users, ala vonHippel, or errors in linux - people who experience the errors are the most motivated; people who write the code or hack the code feel ownership, pride in their craftsmanship (ego) that encourages them to fix it quickly.  </p>
<p style="Normal" xid="132"><c></c></p>
<p style="Normal" xid="133">Other thoughts: </p>
<p style="Normal" xid="134">1. we need to encourage an aesthetic of reuse.  apple et all really *are* at war with us - to render of us of our money!  Sure, they deliver goods and services to do this,  but they also use psyhological tricks (art, aesthetics) in order to maximize the revenue stream.  It is the same in the video game industry (virtual skinner box etc.)  </p>
<p style="Normal" xid="135">2.  We should control culture rather than the other way around, especially concerning the consumerist culture that we have inherited and is leading to ultimately bad things - environmental disaster due to execessive consumption.  We should pick our cultural mores rationally, given knowlege of human irrationality (and nature).   </p>
<p style="Normal" xid="136">3. Ultimately, this idea of not holding information gradients - allowing anyone to reuse and learn from any other human effort at entropy reduction, organization, and understanding - is cast into the competitive biological environment that is the market world.  It must compete for attention, money - and i would argue that this information, like storage, will ultimately be very cheap.  The way to make it win is to work on it, and work smartly, as people have been doing for the last 10-odd years with linux.  </p>
</section>
</abiword>
